"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[501],{6880:(s,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var l=n(4848),i=n(8453);const r={},a="llamaindex_class.py",t={id:"src/sunholo/llamaindex/llamaindex_class",title:"llamaindex_class.py",description:"Source: src/sunholo/llamaindex/llamaindexclass.py",source:"@site/docs/src/sunholo/llamaindex/llamaindex_class.md",sourceDirName:"src/sunholo/llamaindex",slug:"/src/sunholo/llamaindex/llamaindex_class",permalink:"/docs/src/sunholo/llamaindex/llamaindex_class",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/llamaindex/llamaindex_class.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"import_files.py",permalink:"/docs/src/sunholo/llamaindex/import_files"},next:{title:"extensible_mcp_server.py",permalink:"/docs/src/sunholo/mcp/extensible_mcp_server"}},o={},c=[{value:"Functions",id:"functions",level:2},{value:"setup_llamaindex_subparser(subparsers)",id:"setup_llamaindex_subparsersubparsers",level:3},{value:"llamaindex_command(args)",id:"llamaindex_commandargs",level:3},{value:"Classes",id:"classes",level:2},{value:"LlamaIndexVertexCorpusManager",id:"llamaindexvertexcorpusmanager",level:3}];function d(s){const e={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...s.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"llamaindex_classpy",children:"llamaindex_class.py"})}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.em,{children:"Source"}),": ",(0,l.jsx)(e.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/llamaindex/llamaindex_class.py",children:"src/sunholo/llamaindex/llamaindex_class.py"})]}),"\n",(0,l.jsx)(e.h2,{id:"functions",children:"Functions"}),"\n",(0,l.jsx)(e.h3,{id:"setup_llamaindex_subparsersubparsers",children:"setup_llamaindex_subparser(subparsers)"}),"\n",(0,l.jsx)(e.p,{children:"Sets up an argparse subparser for the 'llamaindex' command."}),"\n",(0,l.jsx)(e.p,{children:"Args:\nsubparsers: The subparsers object from argparse.ArgumentParser()."}),"\n",(0,l.jsx)(e.h3,{id:"llamaindex_commandargs",children:"llamaindex_command(args)"}),"\n",(0,l.jsx)(e.p,{children:"No docstring available."}),"\n",(0,l.jsx)(e.h2,{id:"classes",children:"Classes"}),"\n",(0,l.jsx)(e.h3,{id:"llamaindexvertexcorpusmanager",children:"LlamaIndexVertexCorpusManager"}),"\n",(0,l.jsx)(e.p,{children:"A manager class for handling RAG corpora operations with Vertex AI."}),"\n",(0,l.jsx)(e.p,{children:"Attributes:\nconfig (ConfigManager): Configuration manager for fetching project settings.\nproject_id (str): GCP project ID.\nlocation (str): GCP location."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"init"}),"(self, config: sunholo.utils.config_class.ConfigManager = None, project_id: str = None, location: str = None)","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Initializes the LlamaIndexVertexCorpusManager."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Args:\nconfig (ConfigManager): Configuration manager for fetching project settings.\nproject_id (str): GCP project ID.\nlocation (str): GCP location."}),"\n",(0,l.jsx)(e.p,{children:"Raises:\nImportError: If vertexai is not installed."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["create_corpus(self, display_name: str, description: str = None)","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Creates a new corpus or returns an existing one with the specified display name."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Args:\ndisplay_name (str): The display name of the corpus.\ndescription (str, optional): Description of the corpus."}),"\n",(0,l.jsx)(e.p,{children:"Returns:\nThe created or found corpus object."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["delete_corpus(self, display_name: str)","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Deletes a corpus by its display name."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Args:\ndisplay_name (str): The display name of the corpus."}),"\n",(0,l.jsx)(e.p,{children:"Returns:\nbool: True if the corpus was deleted, False otherwise."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"delete_file(self, file_name, corpus_display_name: str)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"fetch_corpus(self, display_name: str)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Fetches a corpus by its display name."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Args:\ndisplay_name (str): The display name of the corpus."}),"\n",(0,l.jsx)(e.p,{children:"Returns:\nThe fetched corpus object."}),"\n",(0,l.jsx)(e.p,{children:"Raises:\nValueError: If the corpus with the specified display name does not exist."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["find_corpus_from_list(self, display_name: str)","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Finds a corpus from the list of corpora by its display name."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Args:\ndisplay_name (str): The display name of the corpus."}),"\n",(0,l.jsx)(e.p,{children:"Returns:\nThe found corpus object if it exists, otherwise None."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["find_file_from_list(self, display_name: str, corpus_display_name: str)","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Finds a file from the list of files by its display name."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Args:\ndisplay_name (str): The display name of the file.\ncorpus_display_name (str): The display name of the corpus to look within"}),"\n",(0,l.jsx)(e.p,{children:"Returns:\nThe found file object if it exists, otherwise None."}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"get_file(self, file_display_name: str = None, file_name: str = None, corpus_display_name: str = None)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"import_files(self, file_imports: list[str], corpus_display_name: str)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"list_corpora(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"List all VertexAI Corpus for the project/location"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"list_files(self, corpus_display_name: str)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"query_corpus(self, query: str, corpus_disply_name: str)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"upload_file(self, filename: str, corpus_display_name: str, description: str = None)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"upload_text(self, text: str, corpus_display_name: str, description: str = None)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Uploads a text string to a specified corpus by saving it to a temporary file first."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Args:\ntext (str): The text content to upload.\ncorpus_display_name (str): The display name of the corpus.\ndescription (str, optional): Description of the text upload."}),"\n",(0,l.jsx)(e.p,{children:"Returns:\nThe uploaded file object."})]})}function p(s={}){const{wrapper:e}={...(0,i.R)(),...s.components};return e?(0,l.jsx)(e,{...s,children:(0,l.jsx)(d,{...s})}):d(s)}},8453:(s,e,n)=>{n.d(e,{R:()=>a,x:()=>t});var l=n(6540);const i={},r=l.createContext(i);function a(s){const e=l.useContext(r);return l.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function t(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(i):s.components||i:a(s.components),l.createElement(r.Provider,{value:e},s.children)}}}]);
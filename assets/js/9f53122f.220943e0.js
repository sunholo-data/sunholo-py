"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2851],{5063:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var r=n(4848),l=n(8453);const t={},i="extensible_mcp_server.py",o={id:"src/sunholo/mcp/extensible_mcp_server",title:"extensible_mcp_server.py",description:"Source: src/sunholo/mcp/extensiblemcpserver.py",source:"@site/docs/src/sunholo/mcp/extensible_mcp_server.md",sourceDirName:"src/sunholo/mcp",slug:"/src/sunholo/mcp/extensible_mcp_server",permalink:"/docs/src/sunholo/mcp/extensible_mcp_server",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/mcp/extensible_mcp_server.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"llamaindex_class.py",permalink:"/docs/src/sunholo/llamaindex/llamaindex_class"},next:{title:"mcp_manager.py",permalink:"/docs/src/sunholo/mcp/mcp_manager"}},c={},d=[{value:"Functions",id:"functions",level:2},{value:"create_mcp_server(server_name: str = &#39;sunholo-mcp-server&#39;, include_vac_tools: bool = True, custom_registry: sunholo.mcp.extensible_mcp_server.MCPToolRegistry = None) -&gt; sunholo.mcp.extensible_mcp_server.ExtensibleMCPServer",id:"create_mcp_serverserver_name-str--sunholo-mcp-server-include_vac_tools-bool--true-custom_registry-sunholomcpextensible_mcp_servermcptoolregistry--none---sunholomcpextensible_mcp_serverextensiblemcpserver",level:3},{value:"get_global_registry() -&gt; sunholo.mcp.extensible_mcp_server.MCPToolRegistry",id:"get_global_registry---sunholomcpextensible_mcp_servermcptoolregistry",level:3},{value:"mcp_resource(name: str = None, description: str = None)",id:"mcp_resourcename-str--none-description-str--none",level:3},{value:"mcp_tool(name: str = None, description: str = None)",id:"mcp_toolname-str--none-description-str--none",level:3},{value:"Classes",id:"classes",level:2},{value:"ExtensibleMCPServer",id:"extensiblemcpserver",level:3},{value:"MCPToolRegistry",id:"mcptoolregistry",level:3}];function a(e){const s={a:"a",br:"br",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"extensible_mcp_serverpy",children:"extensible_mcp_server.py"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"Source"}),": ",(0,r.jsx)(s.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/mcp/extensible_mcp_server.py",children:"src/sunholo/mcp/extensible_mcp_server.py"})]}),"\n",(0,r.jsx)(s.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(s.h3,{id:"create_mcp_serverserver_name-str--sunholo-mcp-server-include_vac_tools-bool--true-custom_registry-sunholomcpextensible_mcp_servermcptoolregistry--none---sunholomcpextensible_mcp_serverextensiblemcpserver",children:"create_mcp_server(server_name: str = 'sunholo-mcp-server', include_vac_tools: bool = True, custom_registry: sunholo.mcp.extensible_mcp_server.MCPToolRegistry = None) -> sunholo.mcp.extensible_mcp_server.ExtensibleMCPServer"}),"\n",(0,r.jsx)(s.p,{children:"Create a new extensible MCP server instance."}),"\n",(0,r.jsx)(s.p,{children:"Args:\nserver_name: Name for the MCP server\ninclude_vac_tools: Whether to include built-in VAC tools\ncustom_registry: Optional custom tool registry"}),"\n",(0,r.jsx)(s.p,{children:"Returns:\nConfigured ExtensibleMCPServer instance"}),"\n",(0,r.jsx)(s.h3,{id:"get_global_registry---sunholomcpextensible_mcp_servermcptoolregistry",children:"get_global_registry() -> sunholo.mcp.extensible_mcp_server.MCPToolRegistry"}),"\n",(0,r.jsx)(s.p,{children:"Get the global MCP tool registry."}),"\n",(0,r.jsx)(s.h3,{id:"mcp_resourcename-str--none-description-str--none",children:"mcp_resource(name: str = None, description: str = None)"}),"\n",(0,r.jsx)(s.p,{children:"Decorator to register a function as an MCP resource."}),"\n",(0,r.jsx)(s.p,{children:"Args:\nname: Optional custom name for the resource\ndescription: Optional description (uses docstring if not provided)"}),"\n",(0,r.jsx)(s.h3,{id:"mcp_toolname-str--none-description-str--none",children:"mcp_tool(name: str = None, description: str = None)"}),"\n",(0,r.jsx)(s.p,{children:"Decorator to register a function as an MCP tool."}),"\n",(0,r.jsx)(s.p,{children:"Args:\nname: Optional custom name for the tool\ndescription: Optional description (uses docstring if not provided)"}),"\n",(0,r.jsx)(s.p,{children:'Example:\n@mcp_tool("my_custom_tool", "Does something useful")\nasync def my_tool(param1: str, param2: int = 5) -> str:\nreturn f"Result: {param1} * {param2}"'}),"\n",(0,r.jsx)(s.h2,{id:"classes",children:"Classes"}),"\n",(0,r.jsx)(s.h3,{id:"extensiblemcpserver",children:"ExtensibleMCPServer"}),"\n",(0,r.jsx)(s.p,{children:"Extensible MCP Server that supports custom tool registration.\nCan be used both as a standalone server and integrated into FastAPI apps."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"init"}),"(self, server_name: str = 'extensible-mcp-server', registry: sunholo.mcp.extensible_mcp_server.MCPToolRegistry = None, include_vac_tools: bool = True)","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Initialize the extensible MCP server."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Args:\nserver_name: Name for the MCP server\nregistry: Custom tool registry (uses global if None)\ninclude_vac_tools: Whether to include built-in VAC tools"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"_register_resources(self)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Register all resources from the registry with FastMCP."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"_register_tools(self)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Register all tools from the registry with FastMCP."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"_register_vac_tools(self)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Register built-in VAC tools."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"add_resource(self, func: Callable, name: str = None, description: str = None)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Add a resource function directly to the server."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Args:\nfunc: The resource function\nname: Optional custom name",(0,r.jsx)(s.br,{}),"\n","description: Optional description"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["add_tool(self, func: Callable, name: str = None, description: str = None)","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Add a tool function directly to the server."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Args:\nfunc: The tool function\nname: Optional custom name\ndescription: Optional description"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"get_http_app(self)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Get the HTTP app for mounting in FastAPI."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"get_server(self) -> fastmcp.server.server.FastMCP"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Get the underlying FastMCP server instance."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"list_registered_resources(self) -> List[str]"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"List all registered resources."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"list_registered_tools(self) -> List[str]"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"List all registered tools."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"run(self, transport: str = 'stdio', **kwargs)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Run the MCP server."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:'Args:\ntransport: Transport type ("stdio" or "http")\n**kwargs: Additional arguments for the transport'}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["run_async(self, transport: str = 'stdio', **kwargs)","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Run the MCP server asynchronously."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:'Args:\ntransport: Transport type ("stdio" or "http")\n**kwargs: Additional arguments for the transport'}),"\n",(0,r.jsx)(s.h3,{id:"mcptoolregistry",children:"MCPToolRegistry"}),"\n",(0,r.jsx)(s.p,{children:"Registry for MCP tools that can be shared across server instances."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"init"}),"(self)"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Initialize self.  See help(type(self)) for accurate signature."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"get_resource(self, name: str)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Get a registered resource."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"get_tool(self, name: str)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Get a registered tool."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"list_resources(self)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"List all registered resources."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"list_tools(self)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"List all registered tools."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"register_resource(self, name: str, func: Callable, description: str = None)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Register a resource function."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"register_tool(self, name: str, func: Callable, description: str = None)"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Register a tool function."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var r=n(6540);const l={},t=r.createContext(l);function i(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);
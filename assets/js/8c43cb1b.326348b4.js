"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[893],{9282:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>h,toc:()=>l});var n=t(4848),i=t(8453);const c={},a="chat_history.py",h={id:"src/sunholo/agents/chat_history",title:"chat_history.py",description:"Source: src/sunholo/agents/chathistory.py",source:"@site/docs/src/sunholo/agents/chat_history.md",sourceDirName:"src/sunholo/agents",slug:"/src/sunholo/agents/chat_history",permalink:"/docs/src/sunholo/agents/chat_history",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/agents/chat_history.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"vac_a2a_agent.py",permalink:"/docs/src/sunholo/a2a/vac_a2a_agent"},next:{title:"dispatch_to_qa.py",permalink:"/docs/src/sunholo/agents/dispatch_to_qa"}},r={},l=[{value:"Functions",id:"functions",level:2},{value:"extract_chat_history(chat_history=None)",id:"extract_chat_historychat_historynone",level:3},{value:"create_message_element(message: dict)",id:"create_message_elementmessage-dict",level:3},{value:"embeds_to_json(message: dict)",id:"embeds_to_jsonmessage-dict",level:3},{value:"extract_chat_history_async(chat_history=None)",id:"extract_chat_history_asyncchat_historynone",level:3},{value:"extract_chat_history_async_cached(chat_history: List[dict] = None) -&gt; List[Tuple]",id:"extract_chat_history_async_cachedchat_history-listdict--none---listtuple",level:3},{value:"extract_chat_history_with_cache(chat_history: List[dict] = None) -&gt; List[Tuple]",id:"extract_chat_history_with_cachechat_history-listdict--none---listtuple",level:3},{value:"is_ai(message: dict)",id:"is_aimessage-dict",level:3},{value:"is_bot(message: dict)",id:"is_botmessage-dict",level:3},{value:"is_human(message: dict)",id:"is_humanmessage-dict",level:3},{value:"warm_up_cache(chat_histories: List[List[dict]])",id:"warm_up_cachechat_histories-listlistdict",level:3},{value:"Classes",id:"classes",level:2},{value:"ChatHistoryCache",id:"chathistorycache",level:3}];function o(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"chat_historypy",children:"chat_history.py"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"Source"}),": ",(0,n.jsx)(s.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/agents/chat_history.py",children:"src/sunholo/agents/chat_history.py"})]}),"\n",(0,n.jsx)(s.h2,{id:"functions",children:"Functions"}),"\n",(0,n.jsx)(s.h3,{id:"extract_chat_historychat_historynone",children:"extract_chat_history(chat_history=None)"}),"\n",(0,n.jsx)(s.p,{children:"Extracts paired chat history between human and AI messages."}),"\n",(0,n.jsx)(s.p,{children:"This function takes a chat history and returns a list of pairs of messages,\nwhere each pair consists of a human message followed by the corresponding AI response."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nchat_history (list): List of chat messages."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nlist: List of tuples with paired human and AI messages."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'chat_history = [\n    &#123;"name": "Human", "text": "Hello, AI!"&#125;,\n    &#123;"name": "AI", "text": "Hello, Human! How can I help you today?"&#125;\n]\npaired_messages = extract_chat_history(chat_history)\nprint(paired_messages)\n# Output: [("Hello, AI!", "Hello, Human! How can I help you today?")]\n'})}),"\n",(0,n.jsx)(s.h3,{id:"create_message_elementmessage-dict",children:"create_message_element(message: dict)"}),"\n",(0,n.jsx)(s.p,{children:"Extracts the main content of a message."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nmessage (dict): The message to extract content from."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nstr: The text or content of the message."}),"\n",(0,n.jsx)(s.p,{children:"Raises:\nKeyError: If neither 'content' nor 'text' fields are found."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'message = &#123;"text": "Hello, AI!"&#125;\ncontent = create_message_element(message)\nprint(content)\n# Output: \'Hello, AI!\'\n'})}),"\n",(0,n.jsx)(s.h3,{id:"embeds_to_jsonmessage-dict",children:"embeds_to_json(message: dict)"}),"\n",(0,n.jsx)(s.p,{children:"Converts the 'embeds' field in a message to a JSON string."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nmessage (dict): The message containing the 'embeds' field."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nstr: JSON string representation of the 'embeds' field or an empty string if no embeds are found."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'message = &#123;"embeds": [&#123;"type": "image", "url": "https://example.com/image.png"&#125;]&#125;\njson_string = embeds_to_json(message)\nprint(json_string)\n# Output: \'[&#123;"type": "image", "url": "https://example.com/image.png"&#125;]\'\n'})}),"\n",(0,n.jsx)(s.h3,{id:"extract_chat_history_asyncchat_historynone",children:"extract_chat_history_async(chat_history=None)"}),"\n",(0,n.jsx)(s.p,{children:"Extracts paired chat history between human and AI messages."}),"\n",(0,n.jsx)(s.p,{children:"For this lightweight processing, we use a simpler approach that minimizes overhead."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nchat_history (list): List of chat messages."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nlist: List of tuples with paired human and AI messages."}),"\n",(0,n.jsx)(s.h3,{id:"extract_chat_history_async_cachedchat_history-listdict--none---listtuple",children:"extract_chat_history_async_cached(chat_history: List[dict] = None) -> List[Tuple]"}),"\n",(0,n.jsx)(s.p,{children:"Async version that uses the cache and runs in a thread pool if needed."}),"\n",(0,n.jsx)(s.h3,{id:"extract_chat_history_with_cachechat_history-listdict--none---listtuple",children:"extract_chat_history_with_cache(chat_history: List[dict] = None) -> List[Tuple]"}),"\n",(0,n.jsx)(s.p,{children:"Main function to replace the original extract_chat_history."}),"\n",(0,n.jsx)(s.p,{children:"Uses incremental caching for better performance with growing chat histories."}),"\n",(0,n.jsx)(s.h3,{id:"is_aimessage-dict",children:"is_ai(message: dict)"}),"\n",(0,n.jsx)(s.p,{children:"Checks if a message was specifically sent by an AI."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nmessage (dict): The message to check."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nbool: True if the message was sent by an AI, otherwise False."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'message = &#123;"name": "AI"&#125;\nprint(is_ai(message))\n# Output: True\n'})}),"\n",(0,n.jsx)(s.h3,{id:"is_botmessage-dict",children:"is_bot(message: dict)"}),"\n",(0,n.jsx)(s.p,{children:"Checks if a message was sent by a bot."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nmessage (dict): The message to check."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nbool: True if the message was sent by a bot, otherwise False."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'message = &#123;"name": "AI"&#125;\nprint(is_bot(message))\n# Output: True\n'})}),"\n",(0,n.jsx)(s.h3,{id:"is_humanmessage-dict",children:"is_human(message: dict)"}),"\n",(0,n.jsx)(s.p,{children:"Checks if a message was sent by a human."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nmessage (dict): The message to check."}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nbool: True if the message was sent by a human, otherwise False."}),"\n",(0,n.jsx)(s.p,{children:"Example:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'message = &#123;"name": "Human"&#125;\nprint(is_human(message))\n# Output: True\n'})}),"\n",(0,n.jsx)(s.h3,{id:"warm_up_cachechat_histories-listlistdict",children:"warm_up_cache(chat_histories: List[List[dict]])"}),"\n",(0,n.jsx)(s.p,{children:"Pre-populate cache with common chat histories."}),"\n",(0,n.jsx)(s.p,{children:"Args:\nchat_histories: List of chat history lists to cache"}),"\n",(0,n.jsx)(s.h2,{id:"classes",children:"Classes"}),"\n",(0,n.jsx)(s.h3,{id:"chathistorycache",children:"ChatHistoryCache"}),"\n",(0,n.jsx)(s.p,{children:"Incremental cache for chat history processing."}),"\n",(0,n.jsx)(s.p,{children:"Caches processed message pairs and only processes new messages\nwhen the chat history is extended."}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"init"}),"(self, max_cache_size: int = 1000)"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Initialize self.  See help(type(self)) for accurate signature."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"_extract_chat_history_full(self, chat_history: List[dict]) -> List[Tuple]"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Full extraction when no cache is available."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"_find_cached_prefix(self, current_history: List[dict]) -> Tuple[Optional[List[Tuple]], int]"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Find the longest cached prefix of the current chat history."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nTuple of (cached_pairs, cache_length) or (None, 0) if no cache found"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"_get_cache_key(self, chat_history: List[dict]) -> str"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Generate a cache key based on the chat history content."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"_process_new_messages(self, new_messages: List[dict], cached_pairs: List[Tuple]) -> List[Tuple]"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Process only the new messages, considering the state from cached pairs."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Args:\nnew_messages: New messages to process\ncached_pairs: Previously processed message pairs"}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nList of new message pairs"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"_update_cache(self, chat_history: List[dict], pairs: List[Tuple])"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Update cache with new result."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"_verify_cache_validity(self, current_prefix: List[dict], cached_prefix: List[dict]) -> bool"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Quick verification that cached data is still valid."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"clear_cache(self)"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Clear the entire cache."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"extract_chat_history_incremental(self, chat_history: List[dict]) -> List[Tuple]"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Extract chat history with incremental caching."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Args:\nchat_history: List of chat message dictionaries"}),"\n",(0,n.jsx)(s.p,{children:"Returns:\nList of (human_message, ai_message) tuples"})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>h});var n=t(6540);const i={},c=n.createContext(i);function a(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function h(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);
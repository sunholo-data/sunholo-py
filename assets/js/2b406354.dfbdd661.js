"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5345],{8877:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=t(4848),r=t(8453);const o={},i="MCP Server with FastMCP",a={id:"howto/mcp_fastmcp",title:"MCP Server with FastMCP",description:"This guide explains the new FastMCP-based implementation of the Sunholo VAC MCP server, which provides a simpler and more Pythonic way to expose VAC functionality via the Model Context Protocol.",source:"@site/docs/howto/mcp_fastmcp.md",sourceDirName:"howto",slug:"/howto/mcp_fastmcp",permalink:"/docs/howto/mcp_fastmcp",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/howto/mcp_fastmcp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Creating a grounded in Google Search VertexAI app",permalink:"/docs/howto/grounded_vertex"},next:{title:"MCP Integration with VACRoutes",permalink:"/docs/howto/mcp_integration"}},l={},d=[{value:"What&#39;s Changed",id:"whats-changed",level:2},{value:"Key Benefits",id:"key-benefits",level:2},{value:"Before (Standard MCP SDK)",id:"before-standard-mcp-sdk",level:3},{value:"After (FastMCP)",id:"after-fastmcp",level:3},{value:"Usage",id:"usage",level:2},{value:"Available Tools",id:"available-tools",level:2},{value:"vac_stream",id:"vac_stream",level:3},{value:"vac_query",id:"vac_query",level:3},{value:"CLI Commands",id:"cli-commands",level:2},{value:"MCP Server (stdio mode for Claude Desktop)",id:"mcp-server-stdio-mode-for-claude-desktop",level:3},{value:"HTTP Server Mode",id:"http-server-mode",level:3},{value:"Claude Desktop Configuration",id:"claude-desktop-configuration",level:2},{value:"Testing Your MCP Server",id:"testing-your-mcp-server",level:2},{value:"Quick Test",id:"quick-test",level:3},{value:"Test Tool Execution",id:"test-tool-execution",level:3},{value:"Migration Notes",id:"migration-notes",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Custom Transport Configuration",id:"custom-transport-configuration",level:3},{value:"Type-Safe Tool Definitions",id:"type-safe-tool-definitions",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"ImportError for FastMCP",id:"importerror-for-fastmcp",level:3},{value:"Tool Not Appearing in Claude",id:"tool-not-appearing-in-claude",level:3},{value:"Type Validation Errors",id:"type-validation-errors",level:3},{value:"Performance Improvements",id:"performance-improvements",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mcp-server-with-fastmcp",children:"MCP Server with FastMCP"})}),"\n",(0,s.jsx)(n.p,{children:"This guide explains the new FastMCP-based implementation of the Sunholo VAC MCP server, which provides a simpler and more Pythonic way to expose VAC functionality via the Model Context Protocol."}),"\n",(0,s.jsx)(n.h2,{id:"whats-changed",children:"What's Changed"}),"\n",(0,s.jsxs)(n.p,{children:["The Sunholo MCP implementation now uses ",(0,s.jsx)(n.strong,{children:"FastMCP"}),", which provides:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"70% less boilerplate code"})," compared to the standard MCP SDK"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic schema generation"})," from Python type hints"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Decorator-based tool registration"})," for cleaner code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Built-in transport handling"})," for both stdio and HTTP"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better async support"})," and error handling"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,s.jsx)(n.h3,{id:"before-standard-mcp-sdk",children:"Before (Standard MCP SDK)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# ~266 lines of complex setup code\nclass VACMCPServer:\n    def _setup_handlers(self):\n        @self.server.list_tools()\n        async def list_tools() -> List[Tool]:\n            tools = [\n                Tool(\n                    name="vac_stream",\n                    description="Stream responses...",\n                    inputSchema={\n                        "type": "object",\n                        "properties": {\n                            # 30+ lines of manual schema definition\n                        }\n                    }\n                )\n            ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"after-fastmcp",children:"After (FastMCP)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# ~150 lines of clean, readable code\nfrom fastmcp import FastMCP\n\nmcp = FastMCP("sunholo-vac-server")\n\n@mcp.tool\nasync def vac_stream(\n    vector_name: str,\n    user_input: str,\n    chat_history: List[Dict[str, str]] = None\n) -> str:\n    """Stream responses from a Sunholo VAC."""\n    # Direct implementation - schema auto-generated from type hints\n'})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"The FastMCP implementation is now the default. When you enable MCP server in your VAC:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from sunholo.agents.fastapi import VACRoutesFastAPI\n\nvac_routes = VACRoutesFastAPI(\n    app,\n    stream_interpreter=your_interpreter,\n    enable_mcp_server=True  # Uses FastMCP automatically\n)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"available-tools",children:"Available Tools"}),"\n",(0,s.jsx)(n.p,{children:"The FastMCP implementation exposes the same tools with improved definitions:"}),"\n",(0,s.jsx)(n.h3,{id:"vac_stream",children:"vac_stream"}),"\n",(0,s.jsx)(n.p,{children:"Streams responses from a Sunholo VAC with automatic type validation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@mcp.tool\nasync def vac_stream(\n    vector_name: str,           # Required: VAC name\n    user_input: str,            # Required: User's question\n    chat_history: List = None,  # Optional: Conversation history\n    stream_wait_time: float = 7,    # Optional: Chunk wait time\n    stream_timeout: float = 120     # Optional: Total timeout\n) -> str:\n"})}),"\n",(0,s.jsx)(n.h3,{id:"vac_query",children:"vac_query"}),"\n",(0,s.jsx)(n.p,{children:"Non-streaming VAC queries (when vac_interpreter is provided)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@mcp.tool\nasync def vac_query(\n    vector_name: str,\n    user_input: str,\n    chat_history: List = None\n) -> str:\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cli-commands",children:"CLI Commands"}),"\n",(0,s.jsx)(n.p,{children:"The CLI now uses FastMCP for both server and bridge modes:"}),"\n",(0,s.jsx)(n.h3,{id:"mcp-server-stdio-mode-for-claude-desktop",children:"MCP Server (stdio mode for Claude Desktop)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sunholo mcp server\n"})}),"\n",(0,s.jsx)(n.h3,{id:"http-server-mode",children:"HTTP Server Mode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sunholo mcp bridge http://127.0.0.1:8000/mcp\n"})}),"\n",(0,s.jsx)(n.p,{children:"FastMCP handles the transport layer automatically, eliminating the need for a separate stdio-to-HTTP bridge in many cases."}),"\n",(0,s.jsx)(n.h2,{id:"claude-desktop-configuration",children:"Claude Desktop Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The configuration remains the same, but the underlying implementation is now more robust:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "sunholo-vac": {\n      "command": "sunholo",\n      "args": ["mcp", "server"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-your-mcp-server",children:"Testing Your MCP Server"}),"\n",(0,s.jsx)(n.h3,{id:"quick-test",children:"Quick Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run the example\npython examples/mcp_fastmcp_example.py\n\n# In another terminal, test the MCP endpoint\ncurl http://localhost:8000/mcp\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test-tool-execution",children:"Test Tool Execution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from fastmcp import FastMCP\n\n# The server automatically validates inputs\n# Invalid types or missing required fields will raise clear errors\n"})}),"\n",(0,s.jsx)(n.h2,{id:"migration-notes",children:"Migration Notes"}),"\n",(0,s.jsx)(n.p,{children:"If you have existing code using the old MCP implementation:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No code changes required"})," - The interface remains the same"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better error messages"})," - FastMCP provides clearer validation errors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improved performance"})," - Less overhead from manual schema handling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simplified debugging"})," - Cleaner stack traces and error messages"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,s.jsx)(n.h3,{id:"custom-transport-configuration",children:"Custom Transport Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# FastMCP supports multiple transports\nmcp.run(transport="http", port=8000)  # HTTP mode\nmcp.run(transport="stdio")            # stdio mode (default)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"type-safe-tool-definitions",children:"Type-Safe Tool Definitions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from typing import Optional, List, Dict\n\n@mcp.tool\nasync def advanced_vac_tool(\n    required_param: str,\n    optional_param: Optional[int] = None,\n    list_param: List[str] = None,\n    dict_param: Dict[str, Any] = None\n) -> Dict[str, Any]:\n    """\n    FastMCP automatically generates the correct schema\n    from these type hints - no manual definition needed!\n    """\n    return {"result": "processed"}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"importerror-for-fastmcp",children:"ImportError for FastMCP"}),"\n",(0,s.jsx)(n.p,{children:"Ensure FastMCP is installed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install fastmcp>=2.12.0\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tool-not-appearing-in-claude",children:"Tool Not Appearing in Claude"}),"\n",(0,s.jsx)(n.p,{children:"FastMCP tools are registered at module import time. Ensure your interpreter functions are defined before creating the VACMCPServer instance."}),"\n",(0,s.jsx)(n.h3,{id:"type-validation-errors",children:"Type Validation Errors"}),"\n",(0,s.jsx)(n.p,{children:"FastMCP validates all inputs against the type hints. Ensure your tool functions have proper type annotations."}),"\n",(0,s.jsx)(n.h2,{id:"performance-improvements",children:"Performance Improvements"}),"\n",(0,s.jsx)(n.p,{children:"The FastMCP implementation provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Faster startup"})," - Less initialization overhead"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lower memory usage"})," - No redundant schema storage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better async performance"})," - Optimized for async/await patterns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reduced latency"})," - Direct tool invocation without intermediate layers"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://gofastmcp.com",children:"FastMCP Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/howto/mcp_server",children:"Original MCP Server Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/howto/creating_a_vac",children:"Creating a VAC"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://modelcontextprotocol.io",children:"Model Context Protocol"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);
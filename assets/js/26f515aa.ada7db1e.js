"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2768],{9739:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var n=s(4848),t=s(8453);const a={},i="tfvars_editor.py",l={id:"src/sunholo/terraform/tfvars_editor",title:"tfvars_editor.py",description:"Source: src/sunholo/terraform/tfvarseditor.py",source:"@site/docs/src/sunholo/terraform/tfvars_editor.md",sourceDirName:"src/sunholo/terraform",slug:"/src/sunholo/terraform/tfvars_editor",permalink:"/docs/src/sunholo/terraform/tfvars_editor",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/terraform/tfvars_editor.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"stream_lookup.py",permalink:"/docs/src/sunholo/streaming/stream_lookup"},next:{title:"web_browser.py",permalink:"/docs/src/sunholo/tools/web_browser"}},d={},o=[{value:"Functions",id:"functions",level:2},{value:"setup_tfvarseditor_subparser(subparsers)",id:"setup_tfvarseditor_subparsersubparsers",level:3},{value:"tfvars_command(args)",id:"tfvars_commandargs",level:3},{value:"Classes",id:"classes",level:2},{value:"TerraformVarsEditor",id:"terraformvarseditor",level:3},{value:"Attributes:",id:"attributes",level:2},{value:"Methods:",id:"methods",level:2},{value:"Parameters:",id:"parameters",level:2},{value:"Example:",id:"example",level:2},{value:"Returns:",id:"returns",level:2},{value:"Example:",id:"example-1",level:2},{value:"Returns:",id:"returns-1",level:2},{value:"Example:",id:"example-2",level:2},{value:"Parameters:",id:"parameters-1",level:2},{value:"Example:",id:"example-3",level:2},{value:"Example:",id:"example-4",level:2},{value:"Parameters:",id:"parameters-2",level:2},{value:"Example:",id:"example-5",level:2},{value:"Parameters:",id:"parameters-3",level:2},{value:"Example:",id:"example-6",level:2},{value:"Parameters:",id:"parameters-4",level:2},{value:"Returns:",id:"returns-2",level:2},{value:"Example:",id:"example-7",level:2}];function c(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"tfvars_editorpy",children:"tfvars_editor.py"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.em,{children:"Source"}),": ",(0,n.jsx)(r.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/terraform/tfvars_editor.py",children:"src/sunholo/terraform/tfvars_editor.py"})]}),"\n",(0,n.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,n.jsx)(r.h3,{id:"setup_tfvarseditor_subparsersubparsers",children:"setup_tfvarseditor_subparser(subparsers)"}),"\n",(0,n.jsx)(r.p,{children:"Sets up an argparse subparser for the 'tfvars' command."}),"\n",(0,n.jsx)(r.p,{children:"Args:\nsubparsers: The subparsers object from argparse.ArgumentParser()."}),"\n",(0,n.jsx)(r.h3,{id:"tfvars_commandargs",children:"tfvars_command(args)"}),"\n",(0,n.jsx)(r.p,{children:"Executes the tfvars command based on parsed arguments."}),"\n",(0,n.jsx)(r.p,{children:"Args:\nargs: The parsed command-line arguments."}),"\n",(0,n.jsx)(r.h2,{id:"classes",children:"Classes"}),"\n",(0,n.jsx)(r.h3,{id:"terraformvarseditor",children:"TerraformVarsEditor"}),"\n",(0,n.jsx)(r.p,{children:"A class to manage and safely edit Terraform .tfvars files."}),"\n",(0,n.jsx)(r.p,{children:"This class allows you to update specific keys in a .tfvars file with new data\nand ensures that the changes only take effect if Terraform validation passes."}),"\n",(0,n.jsx)(r.h2,{id:"attributes",children:"Attributes:"}),"\n",(0,n.jsx)(r.p,{children:"tfvars_file : str\nThe path to the .tfvars file to be edited.\nterraform_dir : str\nThe directory where Terraform commands will be executed (default is current directory).\ntfvars_data : dict\nThe content of the .tfvars file loaded into a dictionary."}),"\n",(0,n.jsx)(r.h2,{id:"methods",children:"Methods:"}),"\n",(0,n.jsx)(r.p,{children:"_load_tfvars() -> Dict[str, Any]\nLoads the .tfvars file into a dictionary.\n_save_tfvars() -> None\nSaves the current state of the dictionary back to the .tfvars file.\n_backup_tfvars() -> str\nCreates a backup of the current .tfvars file.\n_restore_tfvars(backup_file: str) -> None\nRestores the .tfvars file from the backup.\nupdate_or_add_instance(main_key: str, instance_name: str, instance_data: Dict[str, Any]) -> None\nAdds or updates an instance under a specified top-level key in the .tfvars file.\nvalidate_terraform() -> bool\nRuns `terraform validate` in the specified directory.\nupdate_from_json(json_file: str, main_key: str) -> None\nUpdates the .tfvars file based on the content of a JSON file and validates the changes."}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"init"}),"(self, tfvars_file: str, terraform_dir: str = '.') -> None","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Initializes the TerraformVarsEditor with the given .tfvars file and Terraform directory."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"parameters",children:"Parameters:"}),"\n",(0,n.jsx)(r.p,{children:"tfvars_file : str\nThe path to the .tfvars file to be edited.\nterraform_dir : str\nThe directory where Terraform commands will be executed (default is current directory). Will use MULTIVAC_TERRAFORM_DIR env var if present."}),"\n",(0,n.jsx)(r.h2,{id:"example",children:"Example:"}),"\n",(0,n.jsx)(r.p,{children:"editor = TerraformVarsEditor('example.tfvars', '/path/to/terraform/config')"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["_backup_tfvars(self) -> str","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Creates a backup of the current .tfvars file."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"returns",children:"Returns:"}),"\n",(0,n.jsx)(r.p,{children:"str\nThe path to the backup file."}),"\n",(0,n.jsx)(r.h2,{id:"example-1",children:"Example:"}),"\n",(0,n.jsx)(r.p,{children:"backup_file = self._backup_tfvars()"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["_load_tfvars(self) -> Dict[str, Any]","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Loads the .tfvars file into a dictionary."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"returns-1",children:"Returns:"}),"\n",(0,n.jsx)(r.p,{children:"dict\nThe content of the .tfvars file."}),"\n",(0,n.jsx)(r.h2,{id:"example-2",children:"Example:"}),"\n",(0,n.jsx)(r.p,{children:"data = self._load_tfvars()"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["_restore_tfvars(self, backup_file: str) -> None","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Restores the .tfvars file from the backup."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"parameters-1",children:"Parameters:"}),"\n",(0,n.jsx)(r.p,{children:"backup_file : str\nThe path to the backup file to restore from."}),"\n",(0,n.jsx)(r.h2,{id:"example-3",children:"Example:"}),"\n",(0,n.jsx)(r.p,{children:"self._restore_tfvars('example.tfvars.bak')"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["_save_tfvars(self) -> None","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Saves the current state of the dictionary back to the .tfvars file."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"example-4",children:"Example:"}),"\n",(0,n.jsx)(r.p,{children:"self._save_tfvars()"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["update_from_dict(self, data: Dict[str, Any], main_key: str) -> None","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Updates the .tfvars file based on the content of a Python dictionary and validates the changes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"parameters-2",children:"Parameters:"}),"\n",(0,n.jsx)(r.p,{children:'data : dict\nThe dictionary with the new instance data.\nmain_key : str\nThe top-level key under which the instance is added (e.g., "cloud_run").'}),"\n",(0,n.jsx)(r.h2,{id:"example-5",children:"Example:"}),"\n",(0,n.jsx)(r.p,{children:"editor.update_from_dict(data, 'cloud_run')"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["update_from_json(self, json_file: str, main_key: str) -> None","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Updates the .tfvars file based on the content of a JSON file and validates the changes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"parameters-3",children:"Parameters:"}),"\n",(0,n.jsx)(r.p,{children:'json_file : str\nThe path to the JSON file with the new instance data.\nmain_key : str\nThe top-level key in the .tfvars file (e.g., "cloud_run").'}),"\n",(0,n.jsx)(r.h2,{id:"example-6",children:"Example:"}),"\n",(0,n.jsx)(r.p,{children:"editor.update_from_json('update.json', 'cloud_run')"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["update_or_add_instance(self, main_key: str, instance_name: str, instance_data: Dict[str, Any]) -> None","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Adds or updates an instance under a specified top-level key in the .tfvars file."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"parameters-4",children:"Parameters:"}),"\n",(0,n.jsx)(r.p,{children:'main_key : str\nThe top-level key in the .tfvars file (e.g., "cloud_run").\ninstance_name : str\nThe name of the instance to add or update.\ninstance_data : dict\nThe dictionary containing the instance data.'}),"\n",(0,n.jsx)(r.p,{children:"Example:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"editor.update_or_add_instance('cloud_run', 'new_service', (your dict))\n"})}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["validate_terraform(self) -> bool","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Runs ",(0,n.jsx)(r.code,{children:"terraform init"})," followed by ",(0,n.jsx)(r.code,{children:"terraform validate"})," in the specified directory."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"returns-2",children:"Returns:"}),"\n",(0,n.jsx)(r.p,{children:"bool\nTrue if validation passes, False otherwise."}),"\n",(0,n.jsx)(r.h2,{id:"example-7",children:"Example:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'if self.validate_terraform():\n    print("Validation passed.")\n'})})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>l});var n=s(6540);const t={},a=n.createContext(t);function i(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);
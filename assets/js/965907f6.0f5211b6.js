"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7127],{5625:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=t(4848),a=t(8453);const r={id:"fastapi-vac-routes",title:"FastAPI VAC Routes",sidebar_label:"FastAPI VAC Routes"},i="FastAPI VAC Routes",l={id:"agents/fastapi-vac-routes",title:"FastAPI VAC Routes",description:"The VACRoutesFastAPI class provides a FastAPI-compatible implementation of VAC (Virtual Agent Computer) routes with full streaming support using callbacks. This enables you to build high-performance, async-first GenAI applications with proper streaming capabilities.",source:"@site/docs/agents/fastapi-vac-routes.md",sourceDirName:"agents",slug:"/agents/fastapi-vac-routes",permalink:"/docs/agents/fastapi-vac-routes",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/agents/fastapi-vac-routes.md",tags:[],version:"current",frontMatter:{id:"fastapi-vac-routes",title:"FastAPI VAC Routes",sidebar_label:"FastAPI VAC Routes"},sidebar:"tutorialSidebar",previous:{title:"FastAPI VAC Routes Example",permalink:"/docs/agents/fastapi-examples"},next:{title:"Sunholo CLI",permalink:"/docs/cli"}},o={},c=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Callback Pattern",id:"callback-pattern",level:2},{value:"Async Interpreter with Callbacks",id:"async-interpreter-with-callbacks",level:3},{value:"Sync Interpreter with Callbacks",id:"sync-interpreter-with-callbacks",level:3},{value:"Streaming Formats",id:"streaming-formats",level:2},{value:"1. Plain Text Streaming",id:"1-plain-text-streaming",level:3},{value:"2. Server-Sent Events (SSE)",id:"2-server-sent-events-sse",level:3},{value:"JavaScript SSE Client Example",id:"javascript-sse-client-example",level:3},{value:"OpenAI API Compatibility",id:"openai-api-compatibility",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Full Configuration Options",id:"full-configuration-options",level:3},{value:"Custom Routes",id:"custom-routes",level:3},{value:"MCP Server Integration",id:"mcp-server-integration",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"The Callback Bridge",id:"the-callback-bridge",level:3},{value:"Sync/Async Handling",id:"syncasync-handling",level:3},{value:"Testing",id:"testing",level:2},{value:"Running the Demo",id:"running-the-demo",level:3},{value:"Standalone Demo (No Installation Required)",id:"standalone-demo-no-installation-required",level:4},{value:"Full Demo (With Sunholo Features)",id:"full-demo-with-sunholo-features",level:4},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Migration from Flask",id:"migration-from-flask",level:2},{value:"Flask Version",id:"flask-version",level:3},{value:"FastAPI Version",id:"fastapi-version",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Streaming Not Working",id:"streaming-not-working",level:3},{value:"Sync Interpreter Issues",id:"sync-interpreter-issues",level:3},{value:"Archive QA Errors",id:"archive-qa-errors",level:3},{value:"JavaScript Errors in Test Page",id:"javascript-errors-in-test-page",level:3},{value:"SSE Not Sending Final Response",id:"sse-not-sending-final-response",level:3},{value:"Timeout Errors",id:"timeout-errors",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"VACRoutesFastAPI",id:"vacroutesfastapi",level:3},{value:"VACRequest Model",id:"vacrequest-model",level:3},{value:"Endpoints Created",id:"endpoints-created",level:2},{value:"Examples",id:"examples",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"fastapi-vac-routes",children:"FastAPI VAC Routes"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"VACRoutesFastAPI"})," class provides a FastAPI-compatible implementation of VAC (Virtual Agent Computer) routes with full streaming support using callbacks. This enables you to build high-performance, async-first GenAI applications with proper streaming capabilities."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"VACRoutesFastAPI bridges the gap between callback-based LLM streaming (used by most LLM libraries) and FastAPI's async streaming responses. It supports:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Async and Sync Interpreters"})," - Automatic detection and handling"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Multiple Streaming Formats"})," - Plain text and Server-Sent Events (SSE)"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"OpenAI API Compatibility"})," - Drop-in replacement for OpenAI endpoints"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"MCP Server Support"})," - Model Context Protocol for Claude Code integration"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"A2A Agent Support"})," - Agent-to-Agent communication protocol"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Using uv (recommended)\nuv pip install sunholo[fastapi]\n\n# Or using pip\npip install sunholo[fastapi]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom sunholo.agents.fastapi import VACRoutesFastAPI\n\napp = FastAPI()\n\n# Define your interpreter function\nasync def my_stream_interpreter(\n    question: str,\n    vector_name: str,\n    chat_history: list,\n    callback: Any,\n    **kwargs\n) -> dict:\n    """Your LLM logic here."""\n    # Stream tokens via callback\n    tokens = generate_tokens(question)  # Your LLM logic\n    for token in tokens:\n        await callback.async_on_llm_new_token(token)\n    \n    # Return final response\n    final_response = {\n        "answer": "".join(tokens),\n        "source_documents": []\n    }\n    await callback.async_on_llm_end(final_response)\n    return final_response\n\n# Initialize VAC routes\nvac_routes = VACRoutesFastAPI(\n    app,\n    stream_interpreter=my_stream_interpreter,\n    enable_mcp_server=True  # Enable MCP for Claude Code\n)\n\n# Run with: uvicorn main:app --reload\n'})}),"\n",(0,s.jsx)(n.h2,{id:"callback-pattern",children:"Callback Pattern"}),"\n",(0,s.jsx)(n.p,{children:"The key to VACRoutesFastAPI's streaming is the callback pattern. Your interpreter functions receive a callback object that handles token streaming:"}),"\n",(0,s.jsx)(n.h3,{id:"async-interpreter-with-callbacks",children:"Async Interpreter with Callbacks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'async def async_stream_interpreter(\n    question: str,\n    vector_name: str,\n    chat_history: list,\n    callback: Any,  # Callback handler\n    **kwargs\n) -> dict:\n    # Your LLM call that yields tokens\n    async for token in llm.stream(question):\n        # Send each token via callback\n        await callback.async_on_llm_new_token(token)\n    \n    # Signal completion\n    final_response = {"answer": full_text, "source_documents": sources}\n    await callback.async_on_llm_end(final_response)\n    return final_response\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sync-interpreter-with-callbacks",children:"Sync Interpreter with Callbacks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def sync_stream_interpreter(\n    question: str,\n    vector_name: str,\n    chat_history: list,\n    callback: Any,\n    **kwargs\n) -> dict:\n    # Sync LLM call\n    for token in llm.stream(question):\n        # Send each token via callback (sync version)\n        callback.on_llm_new_token(token)\n    \n    # Signal completion\n    final_response = {"answer": full_text, "source_documents": sources}\n    callback.on_llm_end(final_response)\n    return final_response\n'})}),"\n",(0,s.jsx)(n.h2,{id:"streaming-formats",children:"Streaming Formats"}),"\n",(0,s.jsx)(n.h3,{id:"1-plain-text-streaming",children:"1. Plain Text Streaming"}),"\n",(0,s.jsx)(n.p,{children:"Compatible with the Flask implementation, returns chunks as plain text:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Endpoint: POST /vac/streaming/{vector_name}\ncurl -X POST http://localhost:8000/vac/streaming/my_agent \\\n  -H "Content-Type: application/json" \\\n  -d \'{"user_input": "Hello!"}\'\n\n# Response: Streams text chunks, then final JSON with sources\nHello! How can I help you today?\n{"answer": "Hello! How can I help you today?", "source_documents": [...]}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-server-sent-events-sse",children:"2. Server-Sent Events (SSE)"}),"\n",(0,s.jsx)(n.p,{children:"Better for browser-based clients, follows SSE format:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Endpoint: POST /vac/streaming/{vector_name}/sse\ncurl -X POST http://localhost:8000/vac/streaming/my_agent/sse \\\n  -H "Content-Type: application/json" \\\n  -d \'{"user_input": "Hello!"}\'\n\n# Response: SSE format\ndata: {"chunk": "Hello! "}\ndata: {"chunk": "How can I "}\ndata: {"chunk": "help you today?"}\ndata: {"answer": "Hello! How can I help you today?", "source_documents": [...]}\ndata: [DONE]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"javascript-sse-client-example",children:"JavaScript SSE Client Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function streamChat(question, vectorName) {\n    const response = await fetch(`/vac/streaming/${vectorName}/sse`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({user_input: question})\n    });\n    \n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    \n    while (true) {\n        const {done, value} = await reader.read();\n        if (done) break;\n        \n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n        \n        for (const line of lines) {\n            if (line.startsWith('data: ')) {\n                const data = JSON.parse(line.slice(6));\n                if (data.chunk) {\n                    // Append streaming text\n                    document.getElementById('output').textContent += data.chunk;\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"openai-api-compatibility",children:"OpenAI API Compatibility"}),"\n",(0,s.jsx)(n.p,{children:"VACRoutesFastAPI provides OpenAI-compatible endpoints:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Non-streaming\ncurl -X POST http://localhost:8000/openai/v1/chat/completions \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model": "my_agent",\n    "messages": [\n      {"role": "user", "content": "Hello!"}\n    ]\n  }\'\n\n# Streaming\ncurl -X POST http://localhost:8000/openai/v1/chat/completions \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model": "my_agent",\n    "messages": [\n      {"role": "user", "content": "Hello!"}\n    ],\n    "stream": true\n  }\'\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"full-configuration-options",children:"Full Configuration Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom sunholo.agents.fastapi import VACRoutesFastAPI\n\napp = FastAPI()\n\nvac_routes = VACRoutesFastAPI(\n    app,\n    stream_interpreter=my_stream_interpreter,\n    vac_interpreter=my_non_stream_interpreter,  # Optional non-streaming\n    mcp_servers=[  # MCP client configuration\n        {\n            "name": "filesystem",\n            "command": "mcp-server-filesystem",\n            "args": ["/path/to/files"]\n        }\n    ],\n    enable_mcp_server=True,      # Enable MCP server\n    enable_a2a_agent=True,       # Enable A2A agent\n    a2a_vac_names=["agent1", "agent2"],  # A2A agent names\n    add_langfuse_eval=True       # Enable Langfuse tracing\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-routes",children:"Custom Routes"}),"\n",(0,s.jsx)(n.p,{children:"Add your own custom routes alongside VAC routes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def create_custom_handler():\n    async def custom_handler(request: Request):\n        return JSONResponse({"message": "Custom endpoint"})\n    return custom_handler\n\nvac_routes = VACRoutesFastAPI(\n    app,\n    stream_interpreter=my_interpreter,\n    additional_routes=[\n        {\n            "path": "/custom/endpoint",\n            "handler": create_custom_handler(),\n            "methods": ["GET", "POST"]\n        }\n    ]\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"mcp-server-integration",children:"MCP Server Integration"}),"\n",(0,s.jsx)(n.p,{children:"Enable Model Context Protocol server for Claude Code integration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"vac_routes = VACRoutesFastAPI(\n    app,\n    stream_interpreter=my_interpreter,\n    enable_mcp_server=True\n)\n\n# MCP server available at:\n# GET /mcp - Server information\n# POST /mcp - Handle MCP requests\n"})}),"\n",(0,s.jsx)(n.p,{children:"This allows Claude Code to interact with your VAC as an MCP tool."}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsx)(n.h3,{id:"the-callback-bridge",children:"The Callback Bridge"}),"\n",(0,s.jsx)(n.p,{children:"VACRoutesFastAPI solves the callback-to-streaming challenge using these components:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BufferStreamingStdOutCallbackHandlerAsync"})," - Receives tokens from the LLM"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ContentBuffer"})," - Thread-safe buffer with async event signaling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async Generator"})," - Yields content as it becomes available"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Simplified flow\nLLM \u2192 callback.on_llm_new_token() \u2192 ContentBuffer \u2192 async generator \u2192 StreamingResponse\n"})}),"\n",(0,s.jsx)(n.h3,{id:"syncasync-handling",children:"Sync/Async Handling"}),"\n",(0,s.jsx)(n.p,{children:"The class automatically detects whether your interpreter is async or sync:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async interpreters"}),": Run directly with ",(0,s.jsx)(n.code,{children:"await"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sync interpreters"}),": Run in thread executor with queue-based communication"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.h3,{id:"running-the-demo",children:"Running the Demo"}),"\n",(0,s.jsx)(n.p,{children:"Two demo options are available:"}),"\n",(0,s.jsx)(n.h4,{id:"standalone-demo-no-installation-required",children:"Standalone Demo (No Installation Required)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Uses uv's inline dependencies - just run it!\nuv run examples/fastapi_vac_demo_standalone.py\n\n# Visit the interactive test page\nopen http://localhost:8000/test\n"})}),"\n",(0,s.jsx)(n.h4,{id:"full-demo-with-sunholo-features",children:"Full Demo (With Sunholo Features)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# First install sunholo\nuv pip install -e ".[fastapi]"\n\n# Then run the demo\npython examples/fastapi_vac_demo.py\n\n# With sync interpreters\npython examples/fastapi_vac_demo.py --sync\n'})}),"\n",(0,s.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run the FastAPI VAC routes tests\nuv run pytest tests/test_vac_routes_fastapi.py -v\n\n# Run with coverage\nuv run pytest tests/test_vac_routes_fastapi.py --cov=src/sunholo/agents/fastapi\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example test code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pytest\nfrom fastapi.testclient import TestClient\nfrom sunholo.agents.fastapi import VACRoutesFastAPI\n\ndef test_streaming():\n    app = FastAPI()\n    vac_routes = VACRoutesFastAPI(app, stream_interpreter=my_interpreter)\n    client = TestClient(app)\n    \n    response = client.post(\n        "/vac/streaming/test",\n        json={"user_input": "Hello"}\n    )\n    \n    assert response.status_code == 200\n    assert "Hello" in response.text\n'})}),"\n",(0,s.jsx)(n.h2,{id:"migration-from-flask",children:"Migration from Flask"}),"\n",(0,s.jsx)(n.p,{children:"If you're migrating from Flask VACRoutes:"}),"\n",(0,s.jsx)(n.h3,{id:"flask-version",children:"Flask Version"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from flask import Flask\nfrom sunholo.agents.flask import VACRoutes\n\napp = Flask(__name__)\nvac_routes = VACRoutes(app, stream_interpreter, vac_interpreter)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"fastapi-version",children:"FastAPI Version"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from fastapi import FastAPI\nfrom sunholo.agents.fastapi import VACRoutesFastAPI\n\napp = FastAPI()\nvac_routes = VACRoutesFastAPI(app, stream_interpreter, vac_interpreter)\n"})}),"\n",(0,s.jsx)(n.p,{children:"The API is nearly identical - just change the import and class name!"}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Async When Possible"})," - Async interpreters provide better performance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle Errors in Interpreters"})," - Wrap LLM calls in try/except blocks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Set Appropriate Timeouts"})," - Configure ",(0,s.jsx)(n.code,{children:"stream_timeout"})," based on your LLM"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use SSE for Browsers"})," - SSE format works better with fetch() API"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enable MCP for Development"})," - Makes debugging easier with Claude Code"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"streaming-not-working",children:"Streaming Not Working"}),"\n",(0,s.jsx)(n.p,{children:"Check that your interpreter uses callbacks:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Correct - uses callback\nasync def interpreter(question, vector_name, chat_history, callback, **kwargs):\n    await callback.async_on_llm_new_token("token")\n    \n# \u274c Wrong - no callback usage\nasync def interpreter(question, vector_name, chat_history, **kwargs):\n    return {"answer": "response"}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sync-interpreter-issues",children:"Sync Interpreter Issues"}),"\n",(0,s.jsx)(n.p,{children:"Ensure sync interpreters use the sync callback methods:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# \u2705 Correct for sync\ncallback.on_llm_new_token(token)\n\n# \u274c Wrong for sync\nawait callback.async_on_llm_new_token(token)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"archive-qa-errors",children:"Archive QA Errors"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"archive_qa"})," function is synchronous. Don't use await:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Correct\narchive_qa(bot_output, vector_name)\n\n# \u274c Wrong - will cause "NoneType can\'t be used in await" error\nawait archive_qa(bot_output, vector_name)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"javascript-errors-in-test-page",children:"JavaScript Errors in Test Page"}),"\n",(0,s.jsx)(n.p,{children:'If you see "string literal contains an unescaped line break", ensure newlines are properly escaped in JavaScript strings within Python triple-quoted strings:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# \u2705 Correct - escaped newline\nconst lines = buffer.split('\\\\n');\n\n# \u274c Wrong - will cause syntax error\nconst lines = buffer.split('\\n');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sse-not-sending-final-response",children:"SSE Not Sending Final Response"}),"\n",(0,s.jsx)(n.p,{children:"Ensure your interpreter returns document objects with the correct format:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# The source_documents should have page_content attribute\nclass MockDocument:\n    def __init__(self, page_content, metadata):\n        self.page_content = page_content\n        self.metadata = metadata\n\nfinal_response = {\n    "answer": full_text,\n    "source_documents": [\n        MockDocument(\n            page_content="Document content",\n            metadata={"source": "file.txt"}\n        )\n    ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"timeout-errors",children:"Timeout Errors"}),"\n",(0,s.jsx)(n.p,{children:"Increase the timeout in the request:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'response = client.post("/vac/streaming/agent", json={\n    "user_input": "question",\n    "stream_timeout": 120  # 2 minutes\n})\n'})}),"\n",(0,s.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(n.h3,{id:"vacroutesfastapi",children:"VACRoutesFastAPI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class VACRoutesFastAPI:\n    def __init__(\n        self,\n        app: FastAPI,\n        stream_interpreter: Callable,\n        vac_interpreter: Optional[Callable] = None,\n        additional_routes: Optional[List[Dict]] = None,\n        mcp_servers: Optional[List[Dict[str, Any]]] = None,\n        add_langfuse_eval: bool = True,\n        enable_mcp_server: bool = False,\n        enable_a2a_agent: bool = False,\n        a2a_vac_names: Optional[List[str]] = None\n    )\n"})}),"\n",(0,s.jsx)(n.h3,{id:"vacrequest-model",children:"VACRequest Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class VACRequest(BaseModel):\n    user_input: str\n    chat_history: Optional[List] = None\n    stream_wait_time: Optional[int] = 7\n    stream_timeout: Optional[int] = 120\n    vector_name: Optional[str] = None\n    trace_id: Optional[str] = None\n    eval_percent: Optional[float] = 0.01\n"})}),"\n",(0,s.jsx)(n.h2,{id:"endpoints-created",children:"Endpoints Created"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Endpoint"}),(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"Home endpoint"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/health"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"Health check"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/vac/streaming/{vector_name}"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Plain text streaming"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/vac/streaming/{vector_name}/sse"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"SSE streaming"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/vac/{vector_name}"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Non-streaming response"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/openai/v1/chat/completions"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"OpenAI compatible"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/mcp"})}),(0,s.jsx)(n.td,{children:"GET/POST"}),(0,s.jsx)(n.td,{children:"MCP server (if enabled)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/.well-known/agent.json"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"A2A agent card (if enabled)"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"Full working examples are available in:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"examples/fastapi_vac_demo.py"})," - Complete demo with UI"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tests/test_vac_routes_fastapi.py"})," - Unit tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tests/fixtures/mock_interpreters.py"})," - Mock interpreters for testing"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[407],{9278:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=s(4848),r=s(8453);const o={},i="Model Context Protocol (MCP) Integration",l={id:"integrations/mcp",title:"Model Context Protocol (MCP) Integration",description:"This document explains how to integrate Sunholo VACs (Virtual Agent Computers) with Claude Desktop and Claude Code using the Model Context Protocol (MCP). Sunholo provides a flexible, extensible MCP integration system that allows you to expose VAC functionality and add custom tools for AI applications.",source:"@site/docs/integrations/mcp.md",sourceDirName:"integrations",slug:"/integrations/mcp",permalink:"/docs/integrations/mcp",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/integrations/mcp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LlamaIndex on VertexAI",permalink:"/docs/integrations/llamaindex"},next:{title:"ollama",permalink:"/docs/integrations/ollama"}},a={},c=[{value:"Overview",id:"overview",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Basic FastAPI MCP Server",id:"1-basic-fastapi-mcp-server",level:3},{value:"2. Adding Custom Tools with Decorators",id:"2-adding-custom-tools-with-decorators",level:3},{value:"2. FastAPI Integration with Custom Tools",id:"2-fastapi-integration-with-custom-tools",level:3},{value:"Available MCP Tools",id:"available-mcp-tools",level:2},{value:"<code>vac_stream</code>",id:"vac_stream",level:3},{value:"<code>vac_query</code>",id:"vac_query",level:3},{value:"<code>list_available_vacs</code>",id:"list_available_vacs",level:3},{value:"<code>get_vac_info</code>",id:"get_vac_info",level:3},{value:"Installation Options",id:"installation-options",level:2},{value:"Option 1: FastMCP CLI (Recommended)",id:"option-1-fastmcp-cli-recommended",level:3},{value:"For Claude Desktop:",id:"for-claude-desktop",level:4},{value:"For Claude Code:",id:"for-claude-code",level:4},{value:"Option 2: Manual Configuration",id:"option-2-manual-configuration",level:3},{value:"For Claude Desktop:",id:"for-claude-desktop-1",level:4},{value:"For Claude Code:",id:"for-claude-code-1",level:4},{value:"Option 3: Remote MCP Server",id:"option-3-remote-mcp-server",level:3},{value:"1. Deploy Your FastAPI VAC Server",id:"1-deploy-your-fastapi-vac-server",level:4},{value:"2. Configure Claude Desktop for Remote MCP",id:"2-configure-claude-desktop-for-remote-mcp",level:4},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"New Features",id:"new-features",level:3},{value:"create_app_with_mcp Helper Method",id:"create_app_with_mcp-helper-method",level:4},{value:"Debug Endpoint",id:"debug-endpoint",level:4},{value:"MCP Server Management Methods",id:"mcp-server-management-methods",level:4},{value:"Custom Tool Registration",id:"custom-tool-registration",level:3},{value:"1. Global Decorator Registration",id:"1-global-decorator-registration",level:4},{value:"2. Direct Server Registration",id:"2-direct-server-registration",level:4},{value:"3. FastAPI Integration",id:"3-fastapi-integration",level:4},{value:"4. Programmatic Registration",id:"4-programmatic-registration",level:4},{value:"Resource Registration",id:"resource-registration",level:3},{value:"Environment Configuration",id:"environment-configuration",level:3},{value:"Deployment Options",id:"deployment-options",level:2},{value:"Option 1: Local Claude Desktop Integration",id:"option-1-local-claude-desktop-integration",level:3},{value:"Option 2: Claude Code Integration",id:"option-2-claude-code-integration",level:3},{value:"Option 3: Remote FastAPI Server",id:"option-3-remote-fastapi-server",level:3},{value:"Testing the Integration",id:"testing-the-integration",level:2},{value:"1. Test FastAPI MCP Server",id:"1-test-fastapi-mcp-server",level:3},{value:"2. Test with Claude Desktop/Code",id:"2-test-with-claude-desktopcode",level:3},{value:"3. Test Available Tools",id:"3-test-available-tools",level:3},{value:"4. Verify Installation",id:"4-verify-installation",level:3},{value:"Example Use Cases",id:"example-use-cases",level:2},{value:"Example 1: Business Logic Integration",id:"example-1-business-logic-integration",level:3},{value:"Example 2: External API Integration",id:"example-2-external-api-integration",level:3},{value:"Example 3: File System Operations",id:"example-3-file-system-operations",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Tool Design",id:"1-tool-design",level:3},{value:"2. Security Considerations",id:"2-security-considerations",level:3},{value:"3. Performance",id:"3-performance",level:3},{value:"4. Development Workflow",id:"4-development-workflow",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"MCP Server Not Available",id:"mcp-server-not-available",level:3},{value:"Connection Issues",id:"connection-issues",level:3},{value:"Tool Execution Errors",id:"tool-execution-errors",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Multiple VACs",id:"multiple-vacs",level:2},{value:"Production Deployment",id:"production-deployment",level:2},{value:"Security Considerations for Remote MCP",id:"security-considerations-for-remote-mcp",level:2},{value:"Migration from Old MCP Integration",id:"migration-from-old-mcp-integration",level:2},{value:"Before (Old System)",id:"before-old-system",level:3},{value:"After (New System)",id:"after-new-system",level:3},{value:"Support",id:"support",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"model-context-protocol-mcp-integration",children:"Model Context Protocol (MCP) Integration"})}),"\n",(0,t.jsx)(n.p,{children:"This document explains how to integrate Sunholo VACs (Virtual Agent Computers) with Claude Desktop and Claude Code using the Model Context Protocol (MCP). Sunholo provides a flexible, extensible MCP integration system that allows you to expose VAC functionality and add custom tools for AI applications."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Model Context Protocol (MCP) is a standard that allows AI applications to interact with external systems through a set of tools. Sunholo's MCP integration provides:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Easy Integration"}),": Simple setup for Claude Desktop and Claude Code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Built-in VAC Tools"}),": Automatic access to all Sunholo VAC functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Custom Tools"}),": Add your own tools using decorators or programmatically"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multiple Deployment Options"}),": Standalone servers, FastAPI integration, or remote servers"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.h3,{id:"1-basic-fastapi-mcp-server",children:"1. Basic FastAPI MCP Server"}),"\n",(0,t.jsxs)(n.p,{children:["The simplest way to get started is using the ",(0,t.jsx)(n.code,{children:"create_app_with_mcp"})," helper:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sunholo.agents.fastapi import VACRoutesFastAPI\n\nasync def my_interpreter(question, vector_name, chat_history, callback, **kwargs):\n    """Your VAC interpreter logic here."""\n    return {"answer": f"Response to: {question}", "source_documents": []}\n\n# One line setup with MCP server\napp, vac_routes = VACRoutesFastAPI.create_app_with_mcp(\n    title="My VAC App",\n    stream_interpreter=my_interpreter\n)\n\n# Add custom tools\n@vac_routes.add_mcp_tool\nasync def my_custom_tool(param: str) -> str:\n    return f"Processed: {param}"\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,t.jsx)(n.p,{children:"This gives you immediate access to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vac_stream"})," - Stream responses from VACs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vac_query"})," - Query VACs (non-streaming)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"list_available_vacs"})," - List all configured VACs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"get_vac_info"})," - Get VAC configuration details"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-adding-custom-tools-with-decorators",children:"2. Adding Custom Tools with Decorators"}),"\n",(0,t.jsx)(n.p,{children:"Create your own MCP server with custom tools:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\nfrom sunholo.mcp.extensible_mcp_server import create_mcp_server, mcp_tool\n\n# Global tool registration using decorators\n@mcp_tool("get_weather", "Get weather information")\nasync def get_weather(city: str) -> str:\n    """Get weather for a city."""\n    # Your weather logic here\n    return f"Weather in {city}: Sunny, 22\xb0C"\n\n@mcp_tool("calculate", "Perform calculations") \nasync def calculate(expression: str) -> str:\n    """Safely evaluate math expressions."""\n    try:\n        result = eval(expression)  # Use a safer parser in production\n        return f"{expression} = {result}"\n    except:\n        return "Invalid expression"\n\n# Create server with built-in VAC tools + custom tools\nserver = create_mcp_server("my-custom-server", include_vac_tools=True)\n\nif __name__ == "__main__":\n    server.run()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Install with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"fastmcp install claude-desktop my_custom_server.py --with sunholo[anthropic]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-fastapi-integration-with-custom-tools",children:"2. FastAPI Integration with Custom Tools"}),"\n",(0,t.jsx)(n.p,{children:"Add MCP tools to your existing FastAPI application:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sunholo.agents.fastapi import VACRoutesFastAPI\nfrom fastapi import FastAPI\n\nasync def my_interpreter(question, vector_name, chat_history, callback, **kwargs):\n    """Your VAC interpreter logic."""\n    return {"answer": f"Response: {question}", "source_documents": []}\n\n# Method 1: Use the helper method (recommended)\napp, vac_routes = VACRoutesFastAPI.create_app_with_mcp(\n    title="My App",\n    stream_interpreter=my_interpreter\n)\n\n# Method 2: Manual setup with existing FastAPI app\n# app = FastAPI()\n# vac_routes = VACRoutesFastAPI(\n#     app,\n#     stream_interpreter=my_interpreter,\n#     enable_mcp_server=True\n# )\n\n# Add tools using decorators\n@vac_routes.add_mcp_tool\nasync def get_server_stats() -> dict:\n    """Get server statistics."""\n    return {"uptime": 3600, "requests": 1234}\n\n@vac_routes.add_mcp_tool("word_count", "Count words in text")\nasync def count_words(text: str) -> dict:\n    """Count words and characters in text."""\n    return {\n        "words": len(text.split()),\n        "characters": len(text)\n    }\n\n# Add tools programmatically\nasync def custom_tool(param: str) -> str:\n    return f"Processing: {param}"\n\nvac_routes.add_mcp_tool(custom_tool, "process_data", "Process data")\n\n# Your app is now available at /mcp endpoint for Claude Desktop remote integration\n'})}),"\n",(0,t.jsx)(n.h2,{id:"available-mcp-tools",children:"Available MCP Tools"}),"\n",(0,t.jsx)(n.p,{children:"Once connected, Claude Desktop and Claude Code will have access to these built-in tools:"}),"\n",(0,t.jsx)(n.h3,{id:"vac_stream",children:(0,t.jsx)(n.code,{children:"vac_stream"})}),"\n",(0,t.jsx)(n.p,{children:"Stream responses from a Sunholo VAC (asynchronous streaming interface)."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vector_name"})," (string): Name of the VAC to interact with"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_input"})," (string): The user's question or input"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chat_history"})," (array, optional): Previous conversation history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stream_wait_time"})," (float, optional): Time to wait between stream chunks (default: 7)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stream_timeout"})," (float, optional): Maximum time to wait for response (default: 120)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"vac_query",children:(0,t.jsx)(n.code,{children:"vac_query"})}),"\n",(0,t.jsxs)(n.p,{children:["Query a Sunholo VAC (non-streaming, same as ",(0,t.jsx)(n.code,{children:"vac_stream"})," but different name for compatibility)."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vector_name"})," (string): Name of the VAC to interact with"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_input"})," (string): The user's question or input"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"chat_history"})," (array, optional): Previous conversation history"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"list_available_vacs",children:(0,t.jsx)(n.code,{children:"list_available_vacs"})}),"\n",(0,t.jsx)(n.p,{children:"List all available VAC configurations."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"})," None\n",(0,t.jsx)(n.strong,{children:"Returns:"})," Array of available VAC names"]}),"\n",(0,t.jsx)(n.h3,{id:"get_vac_info",children:(0,t.jsx)(n.code,{children:"get_vac_info"})}),"\n",(0,t.jsx)(n.p,{children:"Get detailed information about a specific VAC configuration."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"vector_name"})," (string): Name of the VAC to get information for"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," Dictionary with VAC configuration details (name, LLM, model, etc.)"]}),"\n",(0,t.jsx)(n.h2,{id:"installation-options",children:"Installation Options"}),"\n",(0,t.jsx)(n.h3,{id:"option-1-fastmcp-cli-recommended",children:"Option 1: FastMCP CLI (Recommended)"}),"\n",(0,t.jsx)(n.h4,{id:"for-claude-desktop",children:"For Claude Desktop:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install FastMCP if not already installed\npip install fastmcp\n\n# Navigate to the examples directory\ncd examples/\n\n# Install the Sunholo MCP server\nfastmcp install claude-desktop sunholo_mcp_server.py --with sunholo[anthropic]\n"})}),"\n",(0,t.jsx)(n.h4,{id:"for-claude-code",children:"For Claude Code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install the Sunholo MCP server for Claude Code\nfastmcp install claude-code sunholo_mcp_server.py --with sunholo[anthropic]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"option-2-manual-configuration",children:"Option 2: Manual Configuration"}),"\n",(0,t.jsx)(n.h4,{id:"for-claude-desktop-1",children:"For Claude Desktop:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Install dependencies:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install sunholo[anthropic] fastmcp\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Configure Claude Desktop:"}),"\nEdit your configuration file:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"macOS:"})," ",(0,t.jsx)(n.code,{children:"~/Library/Application Support/Claude/claude_desktop_config.json"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Windows:"})," ",(0,t.jsx)(n.code,{children:"%APPDATA%\\Claude\\claude_desktop_config.json"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "sunholo-vac": {\n      "command": "python",\n      "args": ["/path/to/sunholo-py/examples/sunholo_mcp_server.py"],\n      "env": {\n        "VAC_CONFIG_FOLDER": "/path/to/your/vac/config"\n      }\n    }\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"for-claude-code-1",children:"For Claude Code:"}),"\n",(0,t.jsx)(n.p,{children:"Follow the same manual configuration approach as Claude Desktop."}),"\n",(0,t.jsx)(n.h3,{id:"option-3-remote-mcp-server",children:"Option 3: Remote MCP Server"}),"\n",(0,t.jsx)(n.p,{children:"For remote deployments, you can run Sunholo as an HTTP MCP server:"}),"\n",(0,t.jsx)(n.h4,{id:"1-deploy-your-fastapi-vac-server",children:"1. Deploy Your FastAPI VAC Server"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sunholo.agents.fastapi import VACRoutesFastAPI\n\nroutes = VACRoutesFastAPI(enable_mcp_server=True)\n\n# Deploy to your cloud provider\napp = routes.app\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-configure-claude-desktop-for-remote-mcp",children:"2. Configure Claude Desktop for Remote MCP"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," Remote MCP servers require Claude Pro, Team, or Enterprise plans."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Open Claude Desktop"}),"\n",(0,t.jsxs)(n.li,{children:["Go to ",(0,t.jsx)(n.strong,{children:"Settings > Connectors"})]}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:'"Add custom connector"'})]}),"\n",(0,t.jsxs)(n.li,{children:["Enter your server URL: ",(0,t.jsx)(n.code,{children:"https://your-domain.com/mcp"})]}),"\n",(0,t.jsx)(n.li,{children:"Complete the authentication flow"}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:'"Add"'})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"new-features",children:"New Features"}),"\n",(0,t.jsx)(n.h4,{id:"create_app_with_mcp-helper-method",children:"create_app_with_mcp Helper Method"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"create_app_with_mcp"})," class method simplifies MCP setup by handling lifespan management automatically:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sunholo.agents.fastapi import VACRoutesFastAPI\n\n# This method automatically:\n# - Creates FastAPI app with proper lifespan\n# - Enables MCP server at /mcp endpoint  \n# - Registers built-in VAC tools\n# - Handles MCP server mounting\napp, vac_routes = VACRoutesFastAPI.create_app_with_mcp(\n    title="My VAC Application",\n    stream_interpreter=my_stream_interpreter,\n    vac_interpreter=my_vac_interpreter,  # Optional\n    app_lifespan=my_lifespan  # Optional custom lifespan\n)\n\n# Add custom tools after creation\n@vac_routes.add_mcp_tool\nasync def my_tool(param: str) -> str:\n    return f"Result: {param}"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"debug-endpoint",children:"Debug Endpoint"}),"\n",(0,t.jsxs)(n.p,{children:["When MCP is enabled, a debug endpoint is automatically available at ",(0,t.jsx)(n.code,{children:"/debug/mcp"})," that shows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "mcp_enabled": true,\n    "has_mcp_server": true, \n    "mcp_tools_count": 9,\n    "mcp_tools": ["vac_query", "list_available_vacs", "get_vac_info", "demo_reverse_text", "..."],\n    "tool_details": [{"name": "vac_query", "description": "Query a Sunholo VAC..."}],\n    "pending_tools": 0,\n    "message": "MCP server is available at /mcp endpoint with 9 tools"\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"mcp-server-management-methods",children:"MCP Server Management Methods"}),"\n",(0,t.jsx)(n.p,{children:"The VACRoutesFastAPI class provides methods for managing MCP tools:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# List registered tools and resources\ntools = vac_routes.list_mcp_tools()\nresources = vac_routes.list_mcp_resources()\n\n# Get the MCP server instance for advanced usage\nmcp_server = vac_routes.get_mcp_server()\n\n# Add resources (data sources)\n@vac_routes.add_mcp_resource\nasync def my_resource(uri: str) -> dict:\n    """Provide resource data."""\n    return {"data": f"Resource for {uri}"}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-tool-registration",children:"Custom Tool Registration"}),"\n",(0,t.jsx)(n.p,{children:"There are multiple ways to register tools:"}),"\n",(0,t.jsx)(n.h4,{id:"1-global-decorator-registration",children:"1. Global Decorator Registration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sunholo.mcp.extensible_mcp_server import mcp_tool\n\n@mcp_tool("tool_name", "Tool description")\nasync def my_tool(param: str) -> str:\n    return f"Result: {param}"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"2-direct-server-registration",children:"2. Direct Server Registration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'server = create_mcp_server("my-server")\n\n@server.add_tool\nasync def another_tool(data: str) -> str:\n    return f"Processed: {data}"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"3-fastapi-integration",children:"3. FastAPI Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'routes = VACRoutesFastAPI(enable_mcp_server=True)\n\n@routes.add_mcp_tool\nasync def fastapi_tool(input_data: str) -> str:\n    return f"FastAPI processed: {input_data}"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"4-programmatic-registration",children:"4. Programmatic Registration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def my_function(text: str) -> str:\n    return text.upper()\n\n# Add to server\nserver.add_tool(my_function, "uppercase_text", "Convert text to uppercase")\n\n# Or add to FastAPI routes\nroutes.add_mcp_tool(my_function, "uppercase_text", "Convert text to uppercase")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"resource-registration",children:"Resource Registration"}),"\n",(0,t.jsx)(n.p,{children:"MCP also supports resources (data sources):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sunholo.mcp.extensible_mcp_server import mcp_resource\n\n@mcp_resource("system_info", "Get system information")\nasync def get_system_info(resource_uri: str) -> dict:\n    """Get system information resource."""\n    return {\n        "system": "Linux",\n        "python_version": "3.11",\n        "resource_uri": resource_uri\n    }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Configure the MCP server with environment variables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Default VAC to use\nexport DEFAULT_VAC_NAME="my-chatbot"\n\n# Path to VAC configuration files  \nexport VAC_CONFIG_FOLDER="/path/to/configs"\n\n# Logging level\nexport LOG_LEVEL="INFO"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Or set in Claude Desktop configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "my-sunholo-server": {\n      "command": "python",\n      "args": ["/path/to/my_server.py"],\n      "env": {\n        "DEFAULT_VAC_NAME": "my-chatbot",\n        "VAC_CONFIG_FOLDER": "/Users/me/vac-configs"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"deployment-options",children:"Deployment Options"}),"\n",(0,t.jsx)(n.h3,{id:"option-1-local-claude-desktop-integration",children:"Option 1: Local Claude Desktop Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Install directly with FastMCP\nfastmcp install claude-desktop my_server.py --with sunholo[anthropic]\n\n# Or manual configuration in claude_desktop_config.json\n{\n  "mcpServers": {\n    "my-server": {\n      "command": "python",\n      "args": ["/path/to/my_server.py"]\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"option-2-claude-code-integration",children:"Option 2: Claude Code Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"fastmcp install claude-code my_server.py --with sunholo[anthropic]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"option-3-remote-fastapi-server",children:"Option 3: Remote FastAPI Server"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Deploy your FastAPI app with MCP enabled\nroutes = VACRoutesFastAPI(enable_mcp_server=True)\napp = routes.app\n\n# Deploy to cloud provider, then configure Claude Desktop:\n# Settings > Connectors > Add custom connector\n# URL: https://your-domain.com/mcp\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-the-integration",children:"Testing the Integration"}),"\n",(0,t.jsx)(n.h3,{id:"1-test-fastapi-mcp-server",children:"1. Test FastAPI MCP Server"}),"\n",(0,t.jsx)(n.p,{children:"Test the MCP server directly:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Run the simple example\npython examples/fastapi_vac_mcp_simple.py\n\n# In another terminal, test the MCP endpoint\ncurl -X POST http://localhost:8000/mcp/mcp \\\n  -H "Content-Type: application/json" \\\n  -d \'{"jsonrpc": "2.0", "id": 1, "method": "tools/list"}\'\n\n# Test the debug endpoint (if using fastapi_vac_demo.py)\ncurl http://localhost:8000/debug/mcp\n'})}),"\n",(0,t.jsx)(n.p,{children:"The server provides both HTTP endpoints and MCP tools."}),"\n",(0,t.jsx)(n.h3,{id:"2-test-with-claude-desktopcode",children:"2. Test with Claude Desktop/Code"}),"\n",(0,t.jsx)(n.p,{children:"Once configured using FastMCP CLI or manual configuration:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"In Claude Desktop:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Start a new conversation"}),"\n",(0,t.jsx)(n.li,{children:"Type: \"Use the vac_stream tool to ask 'What is machine learning?' to the 'demo' VAC\""}),"\n",(0,t.jsx)(n.li,{children:"Claude will automatically use the MCP tool"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"In Claude Code:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The tools will be available automatically"}),"\n",(0,t.jsx)(n.li,{children:'Use them in conversation: "List available VACs and then query the demo VAC about Python programming"'}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-test-available-tools",children:"3. Test Available Tools"}),"\n",(0,t.jsx)(n.p,{children:"Try these example prompts in Claude Desktop or Claude Code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'- "List all available VACs using the list_available_vacs tool"\n- "Get information about the demo VAC using get_vac_info"  \n- "Use vac_stream to ask the demo VAC: \'Explain quantum computing\'"\n- "Query the demo VAC about \'best practices for API design\'"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-verify-installation",children:"4. Verify Installation"}),"\n",(0,t.jsx)(n.p,{children:"Check that the MCP server is properly installed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# For Claude Desktop\nfastmcp list claude-desktop\n\n# For Claude Code  \nfastmcp list claude-code\n"})}),"\n",(0,t.jsx)(n.h2,{id:"example-use-cases",children:"Example Use Cases"}),"\n",(0,t.jsx)(n.h3,{id:"example-1-business-logic-integration",children:"Example 1: Business Logic Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@mcp_tool("search_customers", "Search customer database")\nasync def search_customers(query: str) -> list:\n    """Search customers by name or email."""\n    # Your database logic here\n    return [\n        {"name": "John Doe", "email": "john@example.com"},\n        {"name": "Jane Smith", "email": "jane@example.com"}\n    ]\n\n@mcp_tool("get_order_status", "Get order status by ID") \nasync def get_order_status(order_id: str) -> dict:\n    """Get status of an order."""\n    # Your order system logic here\n    return {\n        "order_id": order_id,\n        "status": "shipped",\n        "tracking": "1234567890"\n    }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-2-external-api-integration",children:"Example 2: External API Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import httpx\n\n@mcp_tool("translate_text", "Translate text between languages")\nasync def translate_text(text: str, target_lang: str = "es") -> str:\n    """Translate text to target language."""\n    # Integration with translation service\n    async with httpx.AsyncClient() as client:\n        # Your translation API call here\n        return f"Translated \'{text}\' to {target_lang}: [translation result]"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-3-file-system-operations",children:"Example 3: File System Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from pathlib import Path\n\n@mcp_tool("list_project_files", "List files in project directory")\nasync def list_project_files(directory: str = ".") -> list:\n    """List files in a project directory."""\n    try:\n        path = Path(directory)\n        return [f.name for f in path.iterdir() if f.is_file()]\n    except Exception as e:\n        return [f"Error: {str(e)}"]\n\n@mcp_tool("read_config_file", "Read application configuration")\nasync def read_config_file(config_name: str) -> dict:\n    """Read configuration file."""\n    config_path = Path(f"configs/{config_name}.json")\n    if config_path.exists():\n        import json\n        return json.loads(config_path.read_text())\n    return {"error": "Config file not found"}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-tool-design",children:"1. Tool Design"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clear Descriptions"}),": Provide detailed docstrings and descriptions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Hints"}),": Use proper type hints for parameters and return values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Always handle exceptions gracefully"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parameter Validation"}),": Validate inputs before processing"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-security-considerations",children:"2. Security Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input Sanitization"}),": Always validate and sanitize user inputs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resource Limits"}),": Implement timeouts and resource limits"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Authentication"}),": Use proper authentication for remote servers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sensitive Data"}),": Never expose secrets or sensitive information"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-performance",children:"3. Performance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Async Operations"}),": Use async/await for I/O operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Implement caching for expensive operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resource Management"}),": Properly manage database connections and API clients"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Recovery"}),": Implement retry logic for external services"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-development-workflow",children:"4. Development Workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Development server with auto-reload\nif __name__ == "__main__":\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument("--dev", action="store_true", help="Development mode")\n    args = parser.parse_args()\n    \n    if args.dev:\n        print("Development mode - tools may have debug output")\n    \n    server.run()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Import Errors"}),": Make sure all dependencies are installed"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install sunholo[anthropic] fastmcp\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"FastMCP Not Found"}),": Install FastMCP separately if needed"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install fastmcp>=2.12.0\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VAC Tools Not Working"}),": Check environment variables and VAC configuration"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'export DEFAULT_VAC_NAME="demo"\nexport VAC_CONFIG_FOLDER="/path/to/configs"\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Claude Desktop Connection Issues"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Check MCP server is running"}),"\n",(0,t.jsx)(n.li,{children:"Verify configuration file syntax"}),"\n",(0,t.jsx)(n.li,{children:"Check server logs for errors"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Tools Not Appearing"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure tools are properly registered"}),"\n",(0,t.jsx)(n.li,{children:"Check for import errors"}),"\n",(0,t.jsx)(n.li,{children:"Verify FastMCP server startup"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mcp-server-not-available",children:"MCP Server Not Available"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Check that ",(0,t.jsx)(n.code,{children:"enable_mcp_server=True"})," is set"]}),"\n",(0,t.jsxs)(n.li,{children:["Verify FastMCP is installed: ",(0,t.jsx)(n.code,{children:"pip install fastmcp>=2.12.0"})]}),"\n",(0,t.jsx)(n.li,{children:"Check server logs for mounting errors"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"connection-issues",children:"Connection Issues"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure the correct port and URL in Claude Code config"}),"\n",(0,t.jsx)(n.li,{children:"Verify the server is running and accessible"}),"\n",(0,t.jsx)(n.li,{children:"Check firewall settings if running on different machines"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"tool-execution-errors",children:"Tool Execution Errors"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Verify ",(0,t.jsx)(n.code,{children:"vector_name"})," exists in your VAC configuration"]}),"\n",(0,t.jsx)(n.li,{children:"Check interpreter functions are properly configured"}),"\n",(0,t.jsx)(n.li,{children:"Review server logs for detailed error messages"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Enable debug logging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# List registered tools\nserver = create_mcp_server("debug-server")\nprint(f"Registered tools: {server.list_registered_tools()}")\nprint(f"Registered resources: {server.list_registered_resources()}")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"multiple-vacs",children:"Multiple VACs"}),"\n",(0,t.jsx)(n.p,{children:"You can run multiple VAC servers on different ports and configure Claude to access multiple MCP servers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "vac-chatbot": {\n      "transport": "http",\n      "url": "http://localhost:8000/mcp"\n    },\n    "vac-analysis": {\n      "transport": "http", \n      "url": "http://localhost:8001/mcp"\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,t.jsx)(n.p,{children:"For production use:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Use HTTPS endpoints"}),"\n",(0,t.jsx)(n.li,{children:"Configure proper authentication"}),"\n",(0,t.jsx)(n.li,{children:"Set appropriate timeouts"}),"\n",(0,t.jsx)(n.li,{children:"Monitor MCP tool usage"}),"\n",(0,t.jsx)(n.li,{children:"Consider rate limiting"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"security-considerations-for-remote-mcp",children:"Security Considerations for Remote MCP"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Only connect to trusted servers"}),"\n",(0,t.jsx)(n.li,{children:"Review requested permissions carefully"}),"\n",(0,t.jsx)(n.li,{children:"Monitor for unexpected behavior"}),"\n",(0,t.jsx)(n.li,{children:"Use HTTPS for production deployments"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper authentication and rate limiting"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"migration-from-old-mcp-integration",children:"Migration from Old MCP Integration"}),"\n",(0,t.jsx)(n.p,{children:"If you're upgrading from the old MCP integration:"}),"\n",(0,t.jsx)(n.h3,{id:"before-old-system",children:"Before (Old System)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sunholo.mcp.vac_mcp_server_fastmcp import VACMCPServer\n\nserver = VACMCPServer(stream_interpreter=my_func)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"after-new-system",children:"After (New System)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sunholo.mcp.extensible_mcp_server import create_mcp_server\n\n# Built-in VAC tools are included automatically\nserver = create_mcp_server("my-server", include_vac_tools=True)\n\n# Add custom tools easily\n@server.add_tool\nasync def my_custom_tool(param: str) -> str:\n    return f"Result: {param}"\n'})}),"\n",(0,t.jsx)(n.p,{children:"The new system is backward compatible, but we recommend migrating to the extensible system for better flexibility and easier tool management."}),"\n",(0,t.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,t.jsx)(n.p,{children:"For questions or issues:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Check the examples in ",(0,t.jsx)(n.code,{children:"/examples/"})]}),"\n",(0,t.jsx)(n.li,{children:"Review this integration guide"}),"\n",(0,t.jsxs)(n.li,{children:["File issues at: ",(0,t.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/issues",children:"https://github.com/sunholo-data/sunholo-py/issues"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The extensible MCP system makes it easy to create powerful Claude Desktop and Claude Code integrations with both built-in VAC functionality and your own custom tools!"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);
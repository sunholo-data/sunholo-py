"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9018],{2548:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var t=i(4848),r=i(8453);const s={},o="gcp.py",c={id:"src/sunholo/utils/gcp",title:"gcp.py",description:"Source: src/sunholo/utils/gcp.py",source:"@site/docs/src/sunholo/utils/gcp.md",sourceDirName:"src/sunholo/utils",slug:"/src/sunholo/utils/gcp",permalink:"/docs/src/sunholo/utils/gcp",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/utils/gcp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"config_class.py",permalink:"/docs/src/sunholo/utils/config_class"},next:{title:"gcp_project.py",permalink:"/docs/src/sunholo/utils/gcp_project"}},l={},a=[{value:"Functions",id:"functions",level:2},{value:"is_running_on_gcp()",id:"is_running_on_gcp",level:3},{value:"is_running_on_cloudrun()",id:"is_running_on_cloudrun",level:3},{value:"get_metadata(stem)",id:"get_metadatastem",level:3},{value:"get_region()",id:"get_region",level:3},{value:"get_service_account_email()",id:"get_service_account_email",level:3},{value:"is_gcp_logged_in()",id:"is_gcp_logged_in",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"gcppy",children:"gcp.py"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Source"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/utils/gcp.py",children:"src/sunholo/utils/gcp.py"})]}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"is_running_on_gcp",children:"is_running_on_gcp()"}),"\n",(0,t.jsx)(n.p,{children:"Check if the current environment is a Google Cloud Platform (GCP) instance."}),"\n",(0,t.jsx)(n.p,{children:"This function attempts to reach the GCP metadata server to determine if the code\nis running on a GCP instance."}),"\n",(0,t.jsxs)(n.p,{children:["Returns:\nbool: ",(0,t.jsx)(n.code,{children:"True"})," if running on GCP, ",(0,t.jsx)(n.code,{children:"False"})," otherwise."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'if is_running_on_gcp():\n    print("Running on GCP.")\nelse:\n    print("Not running on GCP.")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"is_running_on_cloudrun",children:"is_running_on_cloudrun()"}),"\n",(0,t.jsx)(n.p,{children:"Check if the current environment is a Google Cloud Run instance."}),"\n",(0,t.jsxs)(n.p,{children:["Returns:\nbool: ",(0,t.jsx)(n.code,{children:"True"})," if running on Cloud Run, ",(0,t.jsx)(n.code,{children:"False"})," otherwise."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'if is_running_on_cloudrun():\n    print("Running on Cloud Run.")\nelse:\n    print("Not running on Cloud Run.")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"get_metadatastem",children:"get_metadata(stem)"}),"\n",(0,t.jsx)(n.p,{children:"Retrieve metadata information from the GCP metadata server."}),"\n",(0,t.jsx)(n.p,{children:"Args:\nstem (str): The metadata path to query."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nstr or None: The metadata information if found, None otherwise."}),"\n",(0,t.jsx)(n.h3,{id:"get_region",children:"get_region()"}),"\n",(0,t.jsx)(n.p,{children:"Retrieve the region of the GCP instance."}),"\n",(0,t.jsx)(n.p,{children:"This function attempts to retrieve the region by extracting it from the zone information\navailable in the GCP metadata server."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nstr or None: The region if found, None otherwise."}),"\n",(0,t.jsx)(n.h3,{id:"get_service_account_email",children:"get_service_account_email()"}),"\n",(0,t.jsx)(n.p,{children:"Retrieve the service account email from environment variables or the GCP metadata server."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nstr or None: The service account email if found, None otherwise."}),"\n",(0,t.jsx)(n.h3,{id:"is_gcp_logged_in",children:"is_gcp_logged_in()"}),"\n",(0,t.jsx)(n.p,{children:"Check if the current environment has valid Google Cloud Platform (GCP) credentials."}),"\n",(0,t.jsxs)(n.p,{children:["This function attempts to obtain the default application credentials from the environment.\nIt will return ",(0,t.jsx)(n.code,{children:"True"})," if credentials are available, otherwise it returns ",(0,t.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Returns:\nbool: ",(0,t.jsx)(n.code,{children:"True"})," if GCP credentials are available, ",(0,t.jsx)(n.code,{children:"False"})," otherwise."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'if is_gcp_logged_in():\n    print("GCP credentials found.")\nelse:\n    print("GCP credentials not found or invalid.")\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);
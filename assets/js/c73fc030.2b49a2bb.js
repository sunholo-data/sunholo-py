"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1610],{3705:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var s=t(4848),a=t(8453);const i={},l="FastAPI VAC Routes Example",r={id:"agents/fastapi-examples",title:"FastAPI VAC Routes Example",description:"This directory contains a complete demonstration of the FastAPI VAC Routes implementation with streaming support.",source:"@site/docs/agents/fastapi-examples.md",sourceDirName:"agents",slug:"/agents/fastapi-examples",permalink:"/docs/agents/fastapi-examples",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/agents/fastapi-examples.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FastAPI VAC Routes Implementation Summary",permalink:"/docs/agents/FASTAPI_IMPLEMENTATION_SUMMARY"},next:{title:"FastAPI VAC Routes",permalink:"/docs/agents/fastapi-vac-routes"}},o={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Option 1: Standalone Demo (No Installation Required)",id:"option-1-standalone-demo-no-installation-required",level:3},{value:"Option 2: Full Demo",id:"option-2-full-demo",level:3},{value:"Testing Endpoints",id:"testing-endpoints",level:3},{value:"1. Interactive Web UI",id:"1-interactive-web-ui",level:4},{value:"2. API Documentation",id:"2-api-documentation",level:4},{value:"3. Command Line Testing",id:"3-command-line-testing",level:4},{value:"Key Features Demonstrated",id:"key-features-demonstrated",level:2},{value:"1. Callback-Based Streaming",id:"1-callback-based-streaming",level:3},{value:"2. Automatic Sync/Async Detection",id:"2-automatic-syncasync-detection",level:3},{value:"3. Multiple Streaming Formats",id:"3-multiple-streaming-formats",level:3},{value:"4. OpenAI API Compatibility",id:"4-openai-api-compatibility",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Files in This Example",id:"files-in-this-example",level:2},{value:"Related Files",id:"related-files",level:2},{value:"Integration with Real LLMs",id:"integration-with-real-llms",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Port Already in Use",id:"port-already-in-use",level:3},{value:"Dependencies Not Found",id:"dependencies-not-found",level:3},{value:"Import Errors",id:"import-errors",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"fastapi-vac-routes-example",children:"FastAPI VAC Routes Example"})}),"\n",(0,s.jsx)(n.p,{children:"This directory contains a complete demonstration of the FastAPI VAC Routes implementation with streaming support."}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.h3,{id:"option-1-standalone-demo-no-installation-required",children:"Option 1: Standalone Demo (No Installation Required)"}),"\n",(0,s.jsx)(n.p,{children:"The standalone demo uses uv's inline script dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Just run it - uv handles all dependencies automatically!\nuv run examples/fastapi_vac_demo_standalone.py\n\n# Custom port\nuv run examples/fastapi_vac_demo_standalone.py --port 8080\n"})}),"\n",(0,s.jsx)(n.h3,{id:"option-2-full-demo",children:"Option 2: Full Demo"}),"\n",(0,s.jsx)(n.p,{children:"The full demo requires sunholo to be installed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# First install sunholo with FastAPI support\nuv pip install -e ".[fastapi]"\n\n# Then run with async interpreters (default)\npython examples/fastapi_vac_demo.py\n\n# Run with sync interpreters\npython examples/fastapi_vac_demo.py --sync\n\n# Custom port\npython examples/fastapi_vac_demo.py --port 8080\n'})}),"\n",(0,s.jsx)(n.h3,{id:"testing-endpoints",children:"Testing Endpoints"}),"\n",(0,s.jsx)(n.p,{children:"Once the server is running, you can test it in multiple ways:"}),"\n",(0,s.jsx)(n.h4,{id:"1-interactive-web-ui",children:"1. Interactive Web UI"}),"\n",(0,s.jsxs)(n.p,{children:["Open ",(0,s.jsx)(n.a,{href:"http://localhost:8000/test",children:"http://localhost:8000/test"})," in your browser for an interactive testing interface."]}),"\n",(0,s.jsx)(n.h4,{id:"2-api-documentation",children:"2. API Documentation"}),"\n",(0,s.jsxs)(n.p,{children:["Visit ",(0,s.jsx)(n.a,{href:"http://localhost:8000/docs",children:"http://localhost:8000/docs"})," for auto-generated FastAPI documentation."]}),"\n",(0,s.jsx)(n.h4,{id:"3-command-line-testing",children:"3. Command Line Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Plain text streaming\ncurl -X POST http://localhost:8000/vac/streaming/demo \\\n  -H "Content-Type: application/json" \\\n  -d \'{"user_input": "Hello, how are you?"}\'\n\n# Server-Sent Events (SSE) streaming\ncurl -X POST http://localhost:8000/vac/streaming/demo/sse \\\n  -H "Content-Type: application/json" \\\n  -d \'{"user_input": "Tell me a story"}\'\n\n# Non-streaming response\ncurl -X POST http://localhost:8000/vac/demo \\\n  -H "Content-Type: application/json" \\\n  -d \'{"user_input": "Quick question"}\'\n\n# OpenAI-compatible endpoint\ncurl -X POST http://localhost:8000/openai/v1/chat/completions \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "model": "demo",\n    "messages": [{"role": "user", "content": "Hello!"}],\n    "stream": true\n  }\'\n'})}),"\n",(0,s.jsx)(n.h2,{id:"key-features-demonstrated",children:"Key Features Demonstrated"}),"\n",(0,s.jsx)(n.h3,{id:"1-callback-based-streaming",children:"1. Callback-Based Streaming"}),"\n",(0,s.jsx)(n.p,{children:"The demo shows how to implement streaming with callbacks that work with FastAPI:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"async def stream_interpreter(question, vector_name, chat_history, callback, **kwargs):\n    # Stream tokens via callback\n    for token in generate_tokens():\n        await callback.async_on_llm_new_token(token)\n    \n    # Signal completion\n    await callback.async_on_llm_end(final_response)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-automatic-syncasync-detection",children:"2. Automatic Sync/Async Detection"}),"\n",(0,s.jsx)(n.p,{children:"The VACRoutesFastAPI class automatically detects whether your interpreter is async or sync and handles it appropriately."}),"\n",(0,s.jsx)(n.h3,{id:"3-multiple-streaming-formats",children:"3. Multiple Streaming Formats"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Plain Text"}),": Compatible with Flask implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SSE (Server-Sent Events)"}),": Better for browser-based clients"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-openai-api-compatibility",children:"4. OpenAI API Compatibility"}),"\n",(0,s.jsx)(n.p,{children:"Drop-in replacement for OpenAI's chat completion API, supporting both streaming and non-streaming modes."}),"\n",(0,s.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Client Request\n    \u2193\nFastAPI Route\n    \u2193\nVACRoutesFastAPI\n    \u2193\nStream Interpreter (with callback)\n    \u2193\nBufferStreamingStdOutCallbackHandlerAsync\n    \u2193\nContentBuffer (async event signaling)\n    \u2193\nAsync Generator\n    \u2193\nStreamingResponse\n    \u2193\nClient\n"})}),"\n",(0,s.jsx)(n.h2,{id:"files-in-this-example",children:"Files in This Example"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fastapi_vac_demo.py"})," - Main demo script with mock interpreters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"README_FASTAPI.md"})," - This file"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-files",children:"Related Files"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"src/sunholo/agents/fastapi/vac_routes.py"})," - Main implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tests/test_vac_routes_fastapi.py"})," - Unit tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tests/fixtures/mock_interpreters.py"})," - Mock interpreters for testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"docs/docs/agents/fastapi-vac-routes.md"})," - Full documentation"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-real-llms",children:"Integration with Real LLMs"}),"\n",(0,s.jsx)(n.p,{children:"To use with real LLMs, replace the mock interpreters with your actual implementation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from langchain.llms import OpenAI\nfrom langchain.callbacks.base import BaseCallbackHandler\n\nclass StreamingCallbackHandler(BaseCallbackHandler):\n    def __init__(self, callback):\n        self.callback = callback\n    \n    async def on_llm_new_token(self, token: str, **kwargs):\n        await self.callback.async_on_llm_new_token(token)\n\nasync def real_stream_interpreter(question, vector_name, chat_history, callback, **kwargs):\n    llm = OpenAI(streaming=True, callbacks=[StreamingCallbackHandler(callback)])\n    response = await llm.agenerate([question])\n    \n    final_response = {\n        "answer": response.generations[0][0].text,\n        "source_documents": []  # Add your RAG sources here\n    }\n    \n    await callback.async_on_llm_end(final_response)\n    return final_response\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"port-already-in-use",children:"Port Already in Use"}),"\n",(0,s.jsx)(n.p,{children:"If port 8000 is already in use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"uv run python examples/fastapi_vac_demo.py --port 8001\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dependencies-not-found",children:"Dependencies Not Found"}),"\n",(0,s.jsx)(n.p,{children:"Make sure to install dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"uv pip install fastapi uvicorn httpx\n"})}),"\n",(0,s.jsx)(n.h3,{id:"import-errors",children:"Import Errors"}),"\n",(0,s.jsx)(n.p,{children:"The demo script adds the parent directory to the Python path. If you're running from a different location, adjust the path:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import sys\nimport os\nsys.path.insert(0, '/path/to/sunholo-py')\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Replace mock interpreters with real LLM implementations"}),"\n",(0,s.jsx)(n.li,{children:"Configure MCP server for Claude Code integration"}),"\n",(0,s.jsx)(n.li,{children:"Add authentication and rate limiting"}),"\n",(0,s.jsx)(n.li,{children:"Deploy to production with proper logging and monitoring"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For more information, see the ",(0,s.jsx)(n.a,{href:"/docs/agents/fastapi-vac-routes",children:"full documentation"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var s=t(6540);const a={},i=s.createContext(a);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
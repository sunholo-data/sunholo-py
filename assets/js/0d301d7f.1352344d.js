"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4774],{1872:(n,s,e)=>{e.r(s),e.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});var a=e(4848),t=e(8453);const r={},l="task_manager.py",i={id:"src/sunholo/a2a/task_manager",title:"task_manager.py",description:"Source: src/sunholo/a2a/taskmanager.py",source:"@site/docs/src/sunholo/a2a/task_manager.md",sourceDirName:"src/sunholo/a2a",slug:"/src/sunholo/a2a/task_manager",permalink:"/docs/src/sunholo/a2a/task_manager",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/a2a/task_manager.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"agent_card.py",permalink:"/docs/src/sunholo/a2a/agent_card"},next:{title:"vac_a2a_agent.py",permalink:"/docs/src/sunholo/a2a/vac_a2a_agent"}},c={},o=[{value:"Classes",id:"classes",level:2},{value:"A2ATaskManager",id:"a2ataskmanager",level:3},{value:"A2ATask",id:"a2atask",level:3},{value:"TaskState",id:"taskstate",level:3}];function d(n){const s={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"task_managerpy",children:"task_manager.py"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.em,{children:"Source"}),": ",(0,a.jsx)(s.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/a2a/task_manager.py",children:"src/sunholo/a2a/task_manager.py"})]}),"\n",(0,a.jsx)(s.h2,{id:"classes",children:"Classes"}),"\n",(0,a.jsx)(s.h3,{id:"a2ataskmanager",children:"A2ATaskManager"}),"\n",(0,a.jsx)(s.p,{children:"Manages A2A tasks and their lifecycle."}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"init"}),"(self, stream_interpreter: Callable, vac_interpreter: Optional[Callable] = None)","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Initialize the task manager."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Args:\nstream_interpreter: Function for streaming VAC interactions\nvac_interpreter: Function for static VAC interactions"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["_convert_chat_history(self, a2a_history: List[Dict[str, Any]]) -> List[Dict[str, str]]","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Convert A2A chat history format to VAC format."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Args:\na2a_history: A2A format chat history"}),"\n",(0,a.jsx)(s.p,{children:"Returns:\nVAC format chat history"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"_notify_subscribers(self, task_id: str, task_data: Dict[str, Any])"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Notify all subscribers of a task update."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"_parse_skill_name(self, skill_name: str) -> tuple[str, str]"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Parse skill name to extract VAC name and operation."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:'Expected format: "vac_{operation}_{vac_name}"'}),"\n",(0,a.jsx)(s.p,{children:"Args:\nskill_name: The skill name to parse"}),"\n",(0,a.jsx)(s.p,{children:"Returns:\nTuple of (vac_name, operation)"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"_process_memory_search_task(self, task: sunholo.a2a.task_manager.A2ATask, vac_name: str)"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Process a memory search task."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"_process_query_task(self, task: sunholo.a2a.task_manager.A2ATask, vac_name: str)"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Process a static query task."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"_process_stream_task(self, task: sunholo.a2a.task_manager.A2ATask, vac_name: str)"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Process a streaming task."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"_process_task(self, task: sunholo.a2a.task_manager.A2ATask)"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Process a task by invoking the appropriate VAC functionality."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Args:\ntask: The task to process"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["cancel_task(self, task_id: str) -> bool","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Cancel a task."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Args:\ntask_id: ID of the task to cancel"}),"\n",(0,a.jsx)(s.p,{children:"Returns:\nTrue if task was canceled, False if not found or already completed"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["cleanup_completed_tasks(self, max_age_hours: int = 24)","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Clean up completed tasks older than specified age."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Args:\nmax_age_hours: Maximum age in hours for completed tasks"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["create_task(self, skill_name: str, input_data: Dict[str, Any], client_metadata: Optional[Dict[str, Any]] = None) -> sunholo.a2a.task_manager.A2ATask","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Create a new A2A task."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Args:\nskill_name: Name of the skill to invoke\ninput_data: Input parameters for the task\nclient_metadata: Optional client metadata"}),"\n",(0,a.jsx)(s.p,{children:"Returns:\nCreated A2ATask instance"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"get_task(self, task_id: str) -> Optional[sunholo.a2a.task_manager.A2ATask]"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Get a task by ID."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"subscribe_to_task(self, task_id: str)"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Subscribe to task updates via async generator."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Args:\ntask_id: ID of the task to subscribe to"}),"\n",(0,a.jsx)(s.p,{children:"Yields:\nTask update dictionaries"}),"\n",(0,a.jsx)(s.h3,{id:"a2atask",children:"A2ATask"}),"\n",(0,a.jsx)(s.p,{children:"Represents an A2A task with its state and data."}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"init"}),"(self, task_id: str, skill_name: str, input_data: Dict[str, Any], client_metadata: Optional[Dict[str, Any]] = None)","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Initialize an A2A task."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Args:\ntask_id: Unique task identifier\nskill_name: Name of the skill being invoked\ninput_data: Input parameters for the task\nclient_metadata: Optional metadata from the client"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"add_artifact(self, name: str, content: Any, artifact_type: str = 'text')"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Add an artifact to the task."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"add_message(self, role: str, content: str, message_type: str = 'text')"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Add a message to the task."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"to_dict(self) -> Dict[str, Any]"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Convert task to dictionary format for A2A responses."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"update_progress(self, progress: float)"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Update task progress (0.0 to 1.0)."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"update_state(self, new_state: sunholo.a2a.task_manager.TaskState, error_message: str = None)"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Update the task state."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"taskstate",children:"TaskState"}),"\n",(0,a.jsx)(s.p,{children:"A2A Task states as defined in the protocol."})]})}function h(n={}){const{wrapper:s}={...(0,t.R)(),...n.components};return s?(0,a.jsx)(s,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,s,e)=>{e.d(s,{R:()=>l,x:()=>i});var a=e(6540);const t={},r=a.createContext(t);function l(n){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(s):{...s,...n}}),[s,n])}function i(n){let s;return s=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),a.createElement(r.Provider,{value:s},n.children)}}}]);
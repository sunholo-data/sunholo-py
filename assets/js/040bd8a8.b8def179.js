"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2842],{9034:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var l=s(4848),r=s(8453);const i={},a="vac_routes.py",c={id:"src/sunholo/agents/flask/vac_routes",title:"vac_routes.py",description:"Source: src/sunholo/agents/flask/vacroutes.py",source:"@site/docs/src/sunholo/agents/flask/vac_routes.md",sourceDirName:"src/sunholo/agents/flask",slug:"/src/sunholo/agents/flask/vac_routes",permalink:"/docs/src/sunholo/agents/flask/vac_routes",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/agents/flask/vac_routes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"base.py",permalink:"/docs/src/sunholo/agents/flask/base"},next:{title:"langserve.py",permalink:"/docs/src/sunholo/agents/langserve"}},t={},o=[{value:"Classes",id:"classes",level:2},{value:"VACRoutes",id:"vacroutes",level:3}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"vac_routespy",children:"vac_routes.py"})}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.em,{children:"Source"}),": ",(0,l.jsx)(e.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/agents/flask/vac_routes.py",children:"src/sunholo/agents/flask/vac_routes.py"})]}),"\n",(0,l.jsx)(e.h2,{id:"classes",children:"Classes"}),"\n",(0,l.jsx)(e.h3,{id:"vacroutes",children:"VACRoutes"}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Usage Example:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-python",children:'from agents.flask import VACRoutes\n\napp = Flask(__name__)\n\ndef stream_interpreter(question, vector_name, chat_history, **kwargs):\n    # Implement your streaming logic\n    ...\n\ndef vac_interpreter(question, vector_name, chat_history, **kwargs):\n    # Implement your static VAC logic\n    ...\n\nvac_routes = VACRoutes(app, stream_interpreter, vac_interpreter)\n\nif __name__ == "__main__":\n    app.run(debug=True)\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"init"}),"(self, app, stream_interpreter: <built-in function callable>, vac_interpreter: <built-in function callable> = None, additional_routes: dict = None, mcp_servers: List[Dict[str, Any]] = None, async_stream: bool = False, add_langfuse_eval: bool = True, enable_mcp_server: bool = False, enable_a2a_agent: bool = False, a2a_vac_names: List[str] = None)"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Initialize self.  See help(type(self)) for accurate signature."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"_async_generator_to_stream(async_gen_func)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Helper function to stream the async generator's values to the client."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"_get_or_create_a2a_agent(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Get or create the A2A agent instance with current request context."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"_initialize_mcp_servers(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Initialize connections to configured MCP servers."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"check_authentication(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"create_langfuse_trace(self, request, vector_name, trace_id)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_a2a_agent_card(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Handle A2A agent card discovery request."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_a2a_push_notification(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Handle A2A push notification settings."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_a2a_task_cancel(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Handle A2A task cancel request."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_a2a_task_get(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Handle A2A task get request."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_a2a_task_send(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Handle A2A task send request."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_a2a_task_send_subscribe(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Handle A2A task send with subscription (SSE)."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_file_upload(self, file, vector_name)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_mcp_call_tool(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Call an MCP tool."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_mcp_list_resources(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"List available MCP resources."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_mcp_list_tools(self, server_name: Optional[str] = None)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"List available MCP tools."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_mcp_read_resource(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Read an MCP resource."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_mcp_server(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Handle MCP server requests using HTTP transport."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_openai_compatible_endpoint(self, vector_name=None)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_options(self, **kwargs)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_process_vac(self, vector_name)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_stream_vac(self, vector_name)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"handle_stream_vac_async(self, vector_name)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"health(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"home(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"langfuse_eval_response(self, trace_id, eval_percent=0.01)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Sends an evaluation message based on a probability defined by eval_percent."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Args:\neval_percent (float): The probability (0 to 1) of triggering the evaluation.\ntrace_id (str): The trace identifier for the evaluation."}),"\n",(0,l.jsx)(e.p,{children:"Returns:\nNone"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"make_openai_response(self, user_message, vector_name, answer)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"openai_health_endpoint()"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"prep_vac(self, request, vector_name)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"prep_vac_async(self, request, vector_name)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Async version of prep_vac."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"register_additional_routes(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Registers additional custom routes provided during initialization."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"Example:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-python",children:'from flask import Flask, jsonify\nfrom agents.flask import VACRoutes\n\napp = Flask(__name__)\n\ndef stream_interpreter(question, vector_name, chat_history, **kwargs):\n    # Implement your streaming logic\n    ...\n\ndef vac_interpreter(question, vector_name, chat_history, **kwargs):\n    # Implement your static VAC logic\n    ...\n\ndef custom_handler():\n    return jsonify(&#123;"message": "Custom route!"&#125;)\n\ncustom_routes = [\n    &#123;\n        "rule": "/custom",\n        "methods": ["GET"],\n        "handler": custom_handler\n    &#125;\n]\n\nvac_routes = VACRoutes(app, stream_interpreter, vac_interpreter, additional_routes=custom_routes)\n\nif __name__ == "__main__":\n    app.run(debug=True)\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"register_after_request(self, response)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"register_routes(self)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Registers all the VAC routes for the Flask application."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"vac_interpreter_default(self, question: str, vector_name: str, chat_history=[], **kwargs)"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>c});var l=s(6540);const r={},i=l.createContext(r);function a(n){const e=l.useContext(i);return l.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),l.createElement(i.Provider,{value:e},n.children)}}}]);
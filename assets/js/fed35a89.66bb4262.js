"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9004],{3936:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var s=r(4848),i=r(8453);const o={},t="MCP Server for VACs",l={id:"howto/mcp_server",title:"MCP Server for VACs",description:"This guide explains how to expose your Sunholo VAC (Virtual Agent Computer) functionality as an MCP (Model Context Protocol) server, allowing it to be accessed by any MCP-compatible client.",source:"@site/docs/howto/mcp_server.md",sourceDirName:"howto",slug:"/howto/mcp_server",permalink:"/docs/howto/mcp_server",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/howto/mcp_server.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MCP Integration with VACRoutes",permalink:"/docs/howto/mcp_integration"},next:{title:"Parallel Execution",permalink:"/docs/howto/parallel"}},c={},a=[{value:"Overview",id:"overview",level:2},{value:"Enabling MCP Server",id:"enabling-mcp-server",level:2},{value:"Available MCP Tools",id:"available-mcp-tools",level:2},{value:"vac_stream",id:"vac_stream",level:3},{value:"vac_query",id:"vac_query",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Deploying to Google Cloud Run",id:"deploying-to-google-cloud-run",level:2},{value:"Connecting MCP Clients",id:"connecting-mcp-clients",level:2},{value:"Claude Desktop Integration",id:"claude-desktop-integration",level:3},{value:"Claude Code Integration",id:"claude-code-integration",level:3},{value:"Programming Client Integration",id:"programming-client-integration",level:3},{value:"Authentication",id:"authentication",level:2},{value:"Endpoint Details",id:"endpoint-details",level:2},{value:"Integration with Existing VAC Routes",id:"integration-with-existing-vac-routes",level:2},{value:"Testing Your MCP Server",id:"testing-your-mcp-server",level:2},{value:"Test Server Info",id:"test-server-info",level:3},{value:"Test Tools List",id:"test-tools-list",level:3},{value:"Test Tool Execution",id:"test-tool-execution",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"MCP server not enabled error",id:"mcp-server-not-enabled-error",level:3},{value:"&quot;async for requires <strong>aiter</strong> method&quot; error",id:"async-for-requires-aiter-method-error",level:3},{value:"Authentication errors on Cloud Run",id:"authentication-errors-on-cloud-run",level:3},{value:"Connection timeouts",id:"connection-timeouts",level:3},{value:"Claude Desktop/Code not detecting MCP server",id:"claude-desktopcode-not-detecting-mcp-server",level:3},{value:"&quot;Authentication required&quot; error when running locally",id:"authentication-required-error-when-running-locally",level:3},{value:"HTTP vs stdio transport confusion",id:"http-vs-stdio-transport-confusion",level:3},{value:"Using the MCP Bridge",id:"using-the-mcp-bridge",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mcp-server-for-vacs",children:"MCP Server for VACs"})}),"\n",(0,s.jsx)(n.p,{children:"This guide explains how to expose your Sunholo VAC (Virtual Agent Computer) functionality as an MCP (Model Context Protocol) server, allowing it to be accessed by any MCP-compatible client."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The MCP server functionality allows your Flask-based VAC application to serve as an MCP server, exposing your VAC's capabilities as tools that can be called via the MCP protocol. This is particularly useful when deploying to Google Cloud Run, where authentication is handled via IAM."}),"\n",(0,s.jsx)(n.h2,{id:"enabling-mcp-server",children:"Enabling MCP Server"}),"\n",(0,s.jsxs)(n.p,{children:["To enable MCP server functionality in your VAC, set the ",(0,s.jsx)(n.code,{children:"enable_mcp_server"})," parameter when initializing ",(0,s.jsx)(n.code,{children:"VACRoutes"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from flask import Flask\nfrom sunholo.agents.flask import VACRoutes\n\napp = Flask(__name__)\n\nvac_routes = VACRoutes(\n    app,\n    stream_interpreter=your_stream_interpreter,\n    vac_interpreter=your_vac_interpreter,  # Optional\n    enable_mcp_server=True  # Enable MCP server endpoint\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will create an MCP server endpoint at ",(0,s.jsx)(n.code,{children:"/mcp"})," that handles HTTP-based JSON-RPC requests following the MCP protocol."]}),"\n",(0,s.jsx)(n.h2,{id:"available-mcp-tools",children:"Available MCP Tools"}),"\n",(0,s.jsx)(n.p,{children:"When MCP server is enabled, the following tools are exposed:"}),"\n",(0,s.jsx)(n.h3,{id:"vac_stream",children:"vac_stream"}),"\n",(0,s.jsx)(n.p,{children:"Streams responses from a Sunholo VAC."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vector_name"})," (string, required): Name of the VAC to interact with"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"user_input"})," (string, required): The user's question or input"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"chat_history"})," (array, optional): Previous conversation history"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stream_wait_time"})," (number, optional): Time to wait between stream chunks (default: 7)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stream_timeout"})," (number, optional): Maximum time to wait for response (default: 120)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"vac_query",children:"vac_query"}),"\n",(0,s.jsxs)(n.p,{children:["Non-streaming query to a VAC (only available if ",(0,s.jsx)(n.code,{children:"vac_interpreter"})," is provided)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vector_name"})," (string, required): Name of the VAC to interact with"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"user_input"})," (string, required): The user's question or input"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"chat_history"})," (array, optional): Previous conversation history"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\nfrom flask import Flask\nfrom sunholo.agents.flask import VACRoutes\n\n# Your custom interpreter functions\ndef my_stream_interpreter(question, vector_name, chat_history, **kwargs):\n    """\n    Streaming interpreter that yields responses.\n    Replace with your actual VAC logic.\n    """\n    yield f"Processing query for VAC \'{vector_name}\': {question}\\n"\n    yield "Generating response...\\n"\n    yield {"answer": f"Final answer to: {question}"}\n\ndef my_vac_interpreter(question, vector_name, chat_history, **kwargs):\n    """\n    Non-streaming interpreter.\n    Replace with your actual VAC logic.\n    """\n    return {\n        "answer": f"Response from {vector_name}: {question}",\n        "source_documents": []\n    }\n\n# Create Flask app\napp = Flask(__name__)\n\n# Initialize VAC routes with MCP server enabled\nvac_routes = VACRoutes(\n    app,\n    stream_interpreter=my_stream_interpreter,\n    vac_interpreter=my_vac_interpreter,\n    enable_mcp_server=True\n)\n\nif __name__ == "__main__":\n    app.run(host="0.0.0.0", port=8080)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"deploying-to-google-cloud-run",children:"Deploying to Google Cloud Run"}),"\n",(0,s.jsx)(n.p,{children:"The MCP server is designed to work seamlessly with Google Cloud Run's authentication:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a Dockerfile for your application:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy application\nCOPY . .\n\n# Run the app\nCMD ["python", "app.py"]\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Build and push your container:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcloud builds submit --tag gcr.io/YOUR_PROJECT/vac-mcp-server\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Deploy to Cloud Run with authentication:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcloud run deploy vac-mcp-server \\\n  --image gcr.io/YOUR_PROJECT/vac-mcp-server \\\n  --port 8080 \\\n  --no-allow-unauthenticated \\\n  --region us-central1\n"})}),"\n",(0,s.jsx)(n.h2,{id:"connecting-mcp-clients",children:"Connecting MCP Clients"}),"\n",(0,s.jsx)(n.h3,{id:"claude-desktop-integration",children:"Claude Desktop Integration"}),"\n",(0,s.jsx)(n.p,{children:"To use your VAC MCP server with Claude Desktop, you need to configure it in your Claude Desktop settings. Since Claude Desktop expects stdio-based communication, you'll need to use a stdio-to-HTTP bridge."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. Edit your Claude Desktop configuration file:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["macOS: ",(0,s.jsx)(n.code,{children:"~/Library/Application Support/Claude/claude_desktop_config.json"})]}),"\n",(0,s.jsxs)(n.li,{children:["Windows: ",(0,s.jsx)(n.code,{children:"%APPDATA%\\Claude\\claude_desktop_config.json"})]}),"\n",(0,s.jsxs)(n.li,{children:["Linux: ",(0,s.jsx)(n.code,{children:"~/.config/Claude/claude_desktop_config.json"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. Add your Sunholo VAC server configuration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "sunholo-vac": {\n      "command": "sunholo",\n      "args": [\n        "mcp",\n        "bridge",\n        "http://127.0.0.1:1956/mcp"\n      ]\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Or if you prefer using ",(0,s.jsx)(n.code,{children:"uv"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "sunholo-vac": {\n      "command": "uv",\n      "args": [\n        "run",\n        "sunholo",\n        "mcp",\n        "bridge",\n        "http://127.0.0.1:1956/mcp"\n      ]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"3. For Cloud Run deployment:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "sunholo-vac": {\n      "command": "sunholo",\n      "args": [\n        "mcp",\n        "bridge",\n        "https://vac-mcp-server-xxxxx-uc.a.run.app/mcp"\n      ]\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"4. Restart Claude Desktop"})," to load the new configuration."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"5. Verify the integration:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Open Claude Desktop"}),"\n",(0,s.jsxs)(n.li,{children:["Check if your VAC tools (",(0,s.jsx)(n.code,{children:"vac_stream"})," and optionally ",(0,s.jsx)(n.code,{children:"vac_query"}),") appear in the available tools"]}),"\n",(0,s.jsx)(n.li,{children:"Test by asking Claude to use the tools"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"claude-code-integration",children:"Claude Code Integration"}),"\n",(0,s.jsx)(n.p,{children:"For Claude Code (CLI), the configuration is different:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. Add your local MCP server:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"claude mcp add sunholo-vac sunholo mcp bridge http://127.0.0.1:1956/mcp\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. For Cloud Run deployment:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"claude mcp add sunholo-vac sunholo mcp bridge https://vac-mcp-server-xxxxx-uc.a.run.app/mcp\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"3. List configured MCP servers:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"claude mcp list\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"4. Test the integration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"claude mcp tools sunholo-vac\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"5. Use in Claude Code:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Your VAC tools will appear as available MCP tools"}),"\n",(0,s.jsx)(n.li,{children:'Use the tools directly: "Use the vac_stream tool with vector_name=my_vac and user_input=hello"'}),"\n",(0,s.jsxs)(n.li,{children:["Available tools: ",(0,s.jsx)(n.code,{children:"vac_stream"})," (streaming) and ",(0,s.jsx)(n.code,{children:"vac_query"})," (non-streaming)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"6. Remove if needed:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"claude mcp remove sunholo-vac\n"})}),"\n",(0,s.jsx)(n.h3,{id:"programming-client-integration",children:"Programming Client Integration"}),"\n",(0,s.jsx)(n.p,{children:"For programmatic access using MCP client SDK:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Example using MCP client SDK\nfrom mcp.client import Client\n\n# Connect to your Cloud Run MCP server\nclient = Client(\n    url="https://vac-mcp-server-xxxxx-uc.a.run.app/mcp",\n    auth_token=your_auth_token  # Cloud Run authentication\n)\n\n# List available tools\ntools = await client.list_tools()\n\n# Call the vac_stream tool\nresult = await client.call_tool(\n    "vac_stream",\n    {\n        "vector_name": "my_vac",\n        "user_input": "What is the weather today?",\n        "chat_history": []\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,s.jsxs)(n.p,{children:["When deployed to Cloud Run with ",(0,s.jsx)(n.code,{children:"--no-allow-unauthenticated"}),", the MCP server is protected by Cloud Run's IAM authentication. Clients need:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The Cloud Run Invoker IAM role"}),"\n",(0,s.jsx)(n.li,{children:"Proper authentication tokens in their requests"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For local development, you can use the Cloud Run proxy:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcloud run services proxy vac-mcp-server --port=8080\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then connect to ",(0,s.jsx)(n.code,{children:"http://localhost:8080/mcp"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"endpoint-details",children:"Endpoint Details"}),"\n",(0,s.jsxs)(n.p,{children:["The MCP server endpoint at ",(0,s.jsx)(n.code,{children:"/mcp"})," supports:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GET"}),": Returns server information including available tools"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"POST"}),": Handles JSON-RPC requests following the MCP protocol"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example GET response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "name": "sunholo-vac-server",\n  "version": "1.0.0",\n  "transport": "http",\n  "endpoint": "/mcp",\n  "tools": ["vac_stream", "vac_query"]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-existing-vac-routes",children:"Integration with Existing VAC Routes"}),"\n",(0,s.jsx)(n.p,{children:"The MCP server functionality integrates seamlessly with existing VAC routes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/vac/streaming/<vector_name>"})," - Existing streaming endpoint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/vac/<vector_name>"})," - Existing static endpoint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"/mcp"})," - New MCP server endpoint"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"All endpoints share the same interpreter functions, ensuring consistent behavior across different access methods."}),"\n",(0,s.jsx)(n.h2,{id:"testing-your-mcp-server",children:"Testing Your MCP Server"}),"\n",(0,s.jsx)(n.p,{children:"You can test your MCP server directly using HTTP requests:"}),"\n",(0,s.jsx)(n.h3,{id:"test-server-info",children:"Test Server Info"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:8080/mcp\n"})}),"\n",(0,s.jsx)(n.p,{children:"Expected response:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "endpoint": "/mcp",\n  "name": "sunholo-vac-server", \n  "tools": ["vac_stream", "vac_query"],\n  "transport": "http",\n  "version": "1.0.0"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"test-tools-list",children:"Test Tools List"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8080/mcp \\\n  -H "Content-Type: application/json" \\\n  -d \'{"jsonrpc":"2.0","id":1,"method":"tools/list","params":{}}\'\n'})}),"\n",(0,s.jsx)(n.h3,{id:"test-tool-execution",children:"Test Tool Execution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8080/mcp \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "jsonrpc":"2.0",\n    "id":2,\n    "method":"tools/call",\n    "params":{\n      "name":"vac_stream",\n      "arguments":{\n        "vector_name":"test",\n        "user_input":"Hello world",\n        "stream_timeout":10\n      }\n    }\n  }\'\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"mcp-server-not-enabled-error",children:"MCP server not enabled error"}),"\n",(0,s.jsx)(n.p,{children:'If you see "MCP server not enabled", ensure:'}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["You've installed the required dependencies: ",(0,s.jsx)(n.code,{children:"pip install sunholo[anthropic]"})]}),"\n",(0,s.jsxs)(n.li,{children:["You've set ",(0,s.jsx)(n.code,{children:"enable_mcp_server=True"})," in VACRoutes initialization"]}),"\n",(0,s.jsxs)(n.li,{children:["The MCP dependencies are properly installed: ",(0,s.jsx)(n.code,{children:"pip install mcp"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"async-for-requires-aiter-method-error",children:['"async for requires ',(0,s.jsx)(n.strong,{children:"aiter"}),' method" error']}),"\n",(0,s.jsx)(n.p,{children:"This indicates an async streaming issue. Ensure you've updated to the latest version with async queue fixes."}),"\n",(0,s.jsx)(n.h3,{id:"authentication-errors-on-cloud-run",children:"Authentication errors on Cloud Run"}),"\n",(0,s.jsx)(n.p,{children:"Ensure the client has:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Cloud Run Invoker IAM role granted"}),"\n",(0,s.jsx)(n.li,{children:"Proper authentication headers in requests"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"connection-timeouts",children:"Connection timeouts"}),"\n",(0,s.jsxs)(n.p,{children:["Adjust the ",(0,s.jsx)(n.code,{children:"stream_timeout"})," parameter when calling the ",(0,s.jsx)(n.code,{children:"vac_stream"})," tool if your VAC needs more processing time."]}),"\n",(0,s.jsx)(n.h3,{id:"claude-desktopcode-not-detecting-mcp-server",children:"Claude Desktop/Code not detecting MCP server"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For Claude Desktop:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check your configuration file location (see paths above)"}),"\n",(0,s.jsxs)(n.li,{children:["Ensure you're using ",(0,s.jsx)(n.code,{children:"@modelcontextprotocol/server-stdio-http"})," as the bridge"]}),"\n",(0,s.jsx)(n.li,{children:"Restart Claude Desktop after configuration changes"}),"\n",(0,s.jsx)(n.li,{children:"Check that your VAC server is running on the specified port"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For Claude Code:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"claude mcp list"})," to verify configuration"]}),"\n",(0,s.jsxs)(n.li,{children:["Test with ",(0,s.jsx)(n.code,{children:"claude mcp tools sunholo-vac"})]}),"\n",(0,s.jsxs)(n.li,{children:["Ensure stdio-to-HTTP bridge is installed: ",(0,s.jsx)(n.code,{children:"npm install -g @modelcontextprotocol/server-stdio-http"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"authentication-required-error-when-running-locally",children:'"Authentication required" error when running locally'}),"\n",(0,s.jsx)(n.p,{children:"This should not happen for local MCP servers. Check:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Your VAC server is running without authentication middleware for ",(0,s.jsx)(n.code,{children:"/mcp"})," endpoint"]}),"\n",(0,s.jsxs)(n.li,{children:["No ",(0,s.jsx)(n.code,{children:"_ENDPOINTS_HOST"})," environment variable is set"]}),"\n",(0,s.jsxs)(n.li,{children:["The authentication check in ",(0,s.jsx)(n.code,{children:"check_authentication()"})," only applies to ",(0,s.jsx)(n.code,{children:"/openai/"})," paths"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"http-vs-stdio-transport-confusion",children:"HTTP vs stdio transport confusion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Claude Desktop"}),": Requires stdio transport, use ",(0,s.jsx)(n.code,{children:"sunholo mcp bridge"})," command"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Direct HTTP clients"}),": Can connect directly to ",(0,s.jsx)(n.code,{children:"http://localhost:1956/mcp"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bridge command"}),": ",(0,s.jsx)(n.code,{children:"sunholo mcp bridge [URL]"})," translates stdio to HTTP"]}),"\n",(0,s.jsx)(n.li,{children:"The bridge is built into Sunholo, no external npm packages needed"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"using-the-mcp-bridge",children:"Using the MCP Bridge"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"sunholo mcp bridge"})," command acts as a translator between stdio (what Claude Desktop expects) and HTTP (what your VAC server provides):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Start the bridge manually (for testing)\nsunholo mcp bridge http://127.0.0.1:1956/mcp\n\n# Or with uv\nuv run sunholo mcp bridge http://127.0.0.1:1956/mcp\n\n# The bridge will forward stdio messages to your HTTP server\n"})}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/howto/creating_a_vac",children:"Creating a VAC"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/howto/flask_app",children:"Flask App Development"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/howto/mcp_integration",children:"MCP Integration Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://cloud.google.com/run/docs/host-mcp-servers",children:"Google Cloud Run MCP Documentation"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);
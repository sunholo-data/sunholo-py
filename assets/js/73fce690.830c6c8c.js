"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8750],{3861:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var s=r(4848),o=r(8453);const t={},i="MCP Integration with VACRoutes",l={id:"howto/mcp_integration",title:"MCP Integration with VACRoutes",description:"This document explains how to use the Model Context Protocol (MCP) capabilities integrated into VACRoutes for building AI applications with external tool access.",source:"@site/docs/howto/mcp_integration.md",sourceDirName:"howto",slug:"/howto/mcp_integration",permalink:"/docs/howto/mcp_integration",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/howto/mcp_integration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MCP Server with FastMCP",permalink:"/docs/howto/mcp_fastmcp"},next:{title:"MCP Server for VACs",permalink:"/docs/howto/mcp_server"}},a={},c=[{value:"Overview",id:"overview",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Basic Setup",id:"1-basic-setup",level:3},{value:"2. MCP Server Configuration",id:"2-mcp-server-configuration",level:3},{value:"Available MCP Endpoints",id:"available-mcp-endpoints",level:2},{value:"List Tools",id:"list-tools",level:3},{value:"Call Tool",id:"call-tool",level:3},{value:"List Resources",id:"list-resources",level:3},{value:"Read Resource",id:"read-resource",level:3},{value:"Using MCP in Your AI Agent",id:"using-mcp-in-your-ai-agent",level:2},{value:"1. In Stream Interpreter",id:"1-in-stream-interpreter",level:3},{value:"2. With LangChain Integration",id:"2-with-langchain-integration",level:3},{value:"Popular MCP Servers",id:"popular-mcp-servers",level:2},{value:"Filesystem Server",id:"filesystem-server",level:3},{value:"Brave Search Server",id:"brave-search-server",level:3},{value:"Git Server",id:"git-server",level:3},{value:"SQLite Server",id:"sqlite-server",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Async Streaming with MCP",id:"async-streaming-with-mcp",level:3},{value:"Custom MCP Server",id:"custom-mcp-server",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Testing MCP Integration",id:"testing-mcp-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mcp-integration-with-vacroutes",children:"MCP Integration with VACRoutes"})}),"\n",(0,s.jsx)(n.p,{children:"This document explains how to use the Model Context Protocol (MCP) capabilities integrated into VACRoutes for building AI applications with external tool access."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The VACRoutes class now supports MCP (Model Context Protocol) integration, allowing your AI agents to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Connect to external MCP servers"}),"\n",(0,s.jsx)(n.li,{children:"List and call tools provided by MCP servers"}),"\n",(0,s.jsx)(n.li,{children:"Access resources from MCP servers"}),"\n",(0,s.jsx)(n.li,{children:"Use multiple MCP servers simultaneously"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.h3,{id:"1-basic-setup",children:"1. Basic Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from flask import Flask\nfrom sunholo.agents.flask.vac_routes import VACRoutes\n\napp = Flask(__name__)\n\ndef stream_interpreter(question, vector_name, chat_history, **kwargs):\n    # Your AI logic here\n    return {"answer": f"Response to: {question}"}\n\n# Configure MCP servers\nmcp_servers = [\n    {\n        "name": "filesystem",\n        "command": "npx",\n        "args": ["-y", "@modelcontextprotocol/server-filesystem", "/path/to/allowed/directory"]\n    },\n    {\n        "name": "brave_search",\n        "command": "npx", \n        "args": ["-y", "@modelcontextprotocol/server-brave-search"]\n    }\n]\n\n# Initialize VACRoutes with MCP support\nvac_routes = VACRoutes(\n    app=app,\n    stream_interpreter=stream_interpreter,\n    mcp_servers=mcp_servers\n)\n\nif __name__ == "__main__":\n    app.run(debug=True)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-mcp-server-configuration",children:"2. MCP Server Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Each MCP server configuration requires:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"}),": Unique identifier for the server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"command"}),": Executable command to start the server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"args"}),": Command line arguments (optional)"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'mcp_servers = [\n    {\n        "name": "server_name",\n        "command": "command_to_run", \n        "args": ["--arg1", "value1", "--arg2", "value2"]  # Optional\n    }\n]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"available-mcp-endpoints",children:"Available MCP Endpoints"}),"\n",(0,s.jsx)(n.p,{children:"When MCP servers are configured, VACRoutes automatically registers these endpoints:"}),"\n",(0,s.jsx)(n.h3,{id:"list-tools",children:"List Tools"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"GET /mcp/tools\nGET /mcp/tools/<server_name>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "tools": [\n    {\n      "name": "read_file",\n      "description": "Read contents of a file",\n      "inputSchema": {\n        "type": "object",\n        "properties": {\n          "path": {"type": "string"}\n        }\n      },\n      "server": "filesystem"\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"call-tool",children:"Call Tool"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"POST /mcp/call\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Request:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "server": "filesystem",\n  "tool": "read_file",\n  "arguments": {\n    "path": "/path/to/file.txt"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "result": "File contents here..."\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"list-resources",children:"List Resources"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"GET /mcp/resources\nGET /mcp/resources?server=<server_name>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "resources": [\n    {\n      "uri": "file:///path/to/resource",\n      "name": "Resource Name",\n      "description": "Resource description",\n      "mimeType": "text/plain",\n      "server": "filesystem"\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"read-resource",children:"Read Resource"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"POST /mcp/resources/read\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Request:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "server": "filesystem",\n  "uri": "file:///path/to/resource"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "contents": [\n    {"text": "Resource content here..."}\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-mcp-in-your-ai-agent",children:"Using MCP in Your AI Agent"}),"\n",(0,s.jsx)(n.h3,{id:"1-in-stream-interpreter",children:"1. In Stream Interpreter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import requests\nimport json\n\ndef stream_interpreter(question, vector_name, chat_history, **kwargs):\n    # Check if the question requires external tools\n    if "read file" in question.lower():\n        # Call MCP tool\n        response = requests.post(\'http://localhost:5000/mcp/call\', json={\n            "server": "filesystem",\n            "tool": "read_file", \n            "arguments": {"path": "/path/to/file.txt"}\n        })\n        \n        if response.status_code == 200:\n            file_content = response.json()["result"]\n            return {"answer": f"File content: {file_content}"}\n    \n    # Normal AI processing\n    return {"answer": f"Response to: {question}"}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-with-langchain-integration",children:"2. With LangChain Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from langchain.tools import Tool\nimport requests\n\ndef create_mcp_tool(server_name, tool_name, description):\n    def mcp_tool_func(arguments_json):\n        try:\n            arguments = json.loads(arguments_json)\n            response = requests.post(\'http://localhost:5000/mcp/call\', json={\n                "server": server_name,\n                "tool": tool_name,\n                "arguments": arguments\n            })\n            return response.json().get("result", "Error calling tool")\n        except Exception as e:\n            return f"Error: {str(e)}"\n    \n    return Tool(\n        name=f"{server_name}_{tool_name}",\n        description=description,\n        func=mcp_tool_func\n    )\n\n# Get available tools and create LangChain tools\ntools_response = requests.get(\'http://localhost:5000/mcp/tools\')\nlangchain_tools = []\n\nfor tool in tools_response.json()["tools"]:\n    langchain_tool = create_mcp_tool(\n        server_name=tool["server"],\n        tool_name=tool["name"],\n        description=tool["description"]\n    )\n    langchain_tools.append(langchain_tool)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"popular-mcp-servers",children:"Popular MCP Servers"}),"\n",(0,s.jsx)(n.h3,{id:"filesystem-server",children:"Filesystem Server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'{\n    "name": "filesystem",\n    "command": "npx",\n    "args": ["-y", "@modelcontextprotocol/server-filesystem", "/allowed/path"]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"brave-search-server",children:"Brave Search Server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'{\n    "name": "brave_search", \n    "command": "npx",\n    "args": ["-y", "@modelcontextprotocol/server-brave-search"]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"git-server",children:"Git Server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'{\n    "name": "git",\n    "command": "npx",\n    "args": ["-y", "@modelcontextprotocol/server-git", "--repository", "/path/to/repo"]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sqlite-server",children:"SQLite Server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'{\n    "name": "sqlite",\n    "command": "npx", \n    "args": ["-y", "@modelcontextprotocol/server-sqlite", "--db-path", "/path/to/database.db"]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,s.jsx)(n.p,{children:"Some MCP servers require environment variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import os\n\n# For Brave Search\nos.environ["BRAVE_API_KEY"] = "your-brave-api-key"\n\n# For other services\nos.environ["GITHUB_PERSONAL_ACCESS_TOKEN"] = "your-token"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"The MCP integration includes automatic error handling:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Tool call errors return HTTP 500 with error details\n{\n  "error": "Tool execution failed: reason"\n}\n\n# Server connection errors are logged but don\'t crash the application\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"async-streaming-with-mcp",children:"Async Streaming with MCP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Enable async streaming for better performance\nvac_routes = VACRoutes(\n    app=app,\n    stream_interpreter=async_stream_interpreter,\n    mcp_servers=mcp_servers,\n    async_stream=True  # Enable async streaming\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-mcp-server",children:"Custom MCP Server"}),"\n",(0,s.jsx)(n.p,{children:"You can also connect to custom MCP servers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'{\n    "name": "custom_server",\n    "command": "python",\n    "args": ["/path/to/your/mcp_server.py"]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server not found"}),": Ensure the MCP server command is in your PATH"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connection failures"}),": Check server logs and ensure proper permissions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tool not available"}),": Verify the server is running and tools are properly exposed"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,s.jsx)(n.p,{children:"Enable debug logging to troubleshoot MCP issues:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import logging\nlogging.getLogger('sunholo.mcp').setLevel(logging.DEBUG)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing-mcp-integration",children:"Testing MCP Integration"}),"\n",(0,s.jsx)(n.p,{children:"Use the provided test endpoints to verify MCP functionality:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# List available tools\ncurl http://localhost:5000/mcp/tools\n\n# Test tool call\ncurl -X POST http://localhost:5000/mcp/call \\\n  -H "Content-Type: application/json" \\\n  -d \'{"server": "filesystem", "tool": "list_directory", "arguments": {"path": "/"}}\'\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server Management"}),": Keep MCP servers lightweight and focused"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Always handle MCP tool failures gracefully"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": Only expose necessary directories/resources to MCP servers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Use async streaming for better responsiveness"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitoring"}),": Log MCP tool usage for debugging and optimization"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Explore the ",(0,s.jsx)(n.a,{href:"https://github.com/modelcontextprotocol/servers",children:"MCP Server Registry"})]}),"\n",(0,s.jsx)(n.li,{children:"Build custom MCP servers for your specific use cases"}),"\n",(0,s.jsx)(n.li,{children:"Integrate MCP tools with your existing AI workflows"}),"\n",(0,s.jsx)(n.li,{children:"Monitor and optimize MCP tool performance"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var s=r(6540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);
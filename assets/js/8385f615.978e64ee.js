"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3467],{1249:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=s(4848),r=s(8453);const i={},l="vac_routes.py",a={id:"src/sunholo/agents/fastapi/vac_routes",title:"vac_routes.py",description:"Source: src/sunholo/agents/fastapi/vacroutes.py",source:"@site/docs/src/sunholo/agents/fastapi/vac_routes.md",sourceDirName:"src/sunholo/agents/fastapi",slug:"/src/sunholo/agents/fastapi/vac_routes",permalink:"/docs/src/sunholo/agents/fastapi/vac_routes",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/agents/fastapi/vac_routes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"qna_routes.py",permalink:"/docs/src/sunholo/agents/fastapi/qna_routes"},next:{title:"base.py",permalink:"/docs/src/sunholo/agents/flask/base"}},o={},c=[{value:"Classes",id:"classes",level:2},{value:"VACRequest",id:"vacrequest",level:3},{value:"VACRoutesFastAPI",id:"vacroutesfastapi",level:3},{value:"Key Features",id:"key-features",level:2},{value:"1. VAC Endpoints",id:"1-vac-endpoints",level:3},{value:"2. OpenAI Compatible API",id:"2-openai-compatible-api",level:3},{value:"3. MCP Integration",id:"3-mcp-integration",level:3},{value:"4. A2A Agent Protocol",id:"4-a2a-agent-protocol",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Simplified Setup (Recommended)",id:"simplified-setup-recommended",level:3},{value:"Manual Setup (Advanced)",id:"manual-setup-advanced",level:3},{value:"Adding Custom MCP Tools",id:"adding-custom-mcp-tools",level:2},{value:"Method 1: Using Decorators",id:"method-1-using-decorators",level:3},{value:"Method 2: Programmatic Registration",id:"method-2-programmatic-registration",level:3},{value:"Method 3: Advanced MCP Server Access",id:"method-3-advanced-mcp-server-access",level:3},{value:"MCP Client Integration",id:"mcp-client-integration",level:2},{value:"Claude Desktop Integration",id:"claude-desktop-integration",level:2},{value:"Option 1: Remote Integration (Recommended for Development)",id:"option-1-remote-integration-recommended-for-development",level:3},{value:"Option 2: Local Integration",id:"option-2-local-integration",level:3},{value:"Available Built-in MCP Tools",id:"available-built-in-mcp-tools",level:2},{value:"Error Handling and Best Practices",id:"error-handling-and-best-practices",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Stream Interpreter Function",id:"stream-interpreter-function",level:2},{value:"MCP Server Integration",id:"mcp-server-integration",level:2},{value:"Complete Example",id:"complete-example",level:2}];function d(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"vac_routespy",children:"vac_routes.py"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Source"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/agents/fastapi/vac_routes.py",children:"src/sunholo/agents/fastapi/vac_routes.py"})]}),"\n",(0,t.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,t.jsx)(n.h3,{id:"vacrequest",children:"VACRequest"}),"\n",(0,t.jsx)(n.p,{children:"Request model for VAC endpoints."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"copy"}),"(self) -> 'Self'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a shallow copy of the model."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"deepcopy"}),"(self, memo: 'dict[int, Any] | None' = None) -> 'Self'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a deep copy of the model."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"delattr"}),"(self, item: 'str') -> 'Any'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implement delattr(self, name)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"eq"}),"(self, other: 'Any') -> 'bool'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Return self==value."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"getattr"}),"(self, item: 'str') -> 'Any'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"getstate"}),"(self) -> 'dict[Any, Any]'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Helper for pickle."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"init"}),"(self, /, **data: 'Any') -> 'None'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create a new model by parsing and validating input data from keyword arguments."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model."}),"\n",(0,t.jsx)(n.p,{children:"`self` is explicitly positional-only to allow `self` as a field name."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"iter"}),"(self) -> 'TupleGenerator'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"So `dict(model)` works."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pretty"}),"(self, fmt: 'typing.Callable[[Any], Any]', **kwargs: 'Any') -> 'typing.Generator[Any, None, None]'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Used by devtools (",(0,t.jsx)(n.a,{href:"https://python-devtools.helpmanual.io/",children:"https://python-devtools.helpmanual.io/"}),") to pretty print objects."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"replace"}),"(self, **changes: 'Any') -> 'Self'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repr"}),"(self) -> 'str'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Return repr(self)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repr_args"}),"(self) -> '_repr.ReprArgs'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repr_name"}),"(self) -> 'str'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Name of the instance's class, used in ",(0,t.jsx)(n.strong,{children:"repr"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repr_recursion"}),"(self, object: 'Any') -> 'str'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns the string representation of a recursive object."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"repr_str"}),"(self, join_str: 'str') -> 'str'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"rich_repr"}),"(self) -> 'RichReprResult'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Used by Rich (",(0,t.jsx)(n.a,{href:"https://rich.readthedocs.io/en/stable/pretty.html",children:"https://rich.readthedocs.io/en/stable/pretty.html"}),") to pretty print objects."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"setattr"}),"(self, name: 'str', value: 'Any') -> 'None'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implement setattr(self, name, value)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"setstate"}),"(self, state: 'dict[Any, Any]') -> 'None'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"str"}),"(self) -> 'str'"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Return str(self)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_calculate_keys(self, *args: 'Any', **kwargs: 'Any') -> 'Any'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_copy_and_set_values(self, *args: 'Any', **kwargs: 'Any') -> 'Any'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_iter(self, *args: 'Any', **kwargs: 'Any') -> 'Any'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_setattr_handler(self, name: 'str', value: 'Any') -> 'Callable[[BaseModel, str, Any], None] | None'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get a handler for setting an attribute on the model instance."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Returns:\nA handler for setting an attribute on the model instance. Used for memoization of the handler.\nMemoizing the handlers leads to a dramatic performance improvement in `",(0,t.jsx)(n.strong,{children:"setattr"}),"`\nReturns `None` when memoization is not safe, then the attribute is set directly."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["copy(self, *, include: 'AbstractSetIntStr | MappingIntStrAny | None' = None, exclude: 'AbstractSetIntStr | MappingIntStrAny | None' = None, update: 'Dict[str, Any] | None' = None, deep: 'bool' = False) -> 'Self'","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Returns a copy of the model."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['!!! warning "Deprecated"\nThis method is now deprecated; use ',(0,t.jsx)(n.code,{children:"model_copy"})," instead."]}),"\n",(0,t.jsxs)(n.p,{children:["If you need ",(0,t.jsx)(n.code,{children:"include"})," or ",(0,t.jsx)(n.code,{children:"exclude"}),", use:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'{test="skip" lint="skip"}',children:"data = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = &#123;**data, **(update or &#123;&#125;)&#125;\ncopied = self.model_validate(data)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Args:\ninclude: Optional set or mapping specifying which fields to include in the copied model.\nexclude: Optional set or mapping specifying which fields to exclude in the copied model.\nupdate: Optional dictionary of field-value pairs to override field values in the copied model.\ndeep: If True, the values of fields that are Pydantic models will be deep-copied."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nA copy of the model with included, excluded and updated fields as specified."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"dict(self, *, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False) -> 'Dict[str, Any]'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"json(self, *, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, encoder: 'Callable[[Any], Any] | None' = PydanticUndefined, models_as_dict: 'bool' = PydanticUndefined, **dumps_kwargs: 'Any') -> 'str'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"model_copy(self, *, update: 'Mapping[str, Any] | None' = None, deep: 'bool' = False) -> 'Self'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'!!! abstract "Usage Documentation"\n`model_copy`'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns a copy of the model."}),"\n",(0,t.jsxs)(n.p,{children:["!!! note\nThe underlying instance's [`",(0,t.jsx)(n.strong,{children:"dict"}),"`][object.",(0,t.jsx)(n.strong,{children:"dict"}),"] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property])."]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nupdate: Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\ndeep: Set to `True` to make a deep copy of the model."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nNew model instance."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["model_dump(self, *, mode: \"Literal['json', 'python'] | str\" = 'python', include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, context: 'Any | None' = None, by_alias: 'bool | None' = None, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, fallback: 'Callable[[Any], Any] | None' = None, serialize_as_any: 'bool' = False) -> 'dict[str, Any]'","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'!!! abstract "Usage Documentation"\n`model_dump`'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Generate a dictionary representation of the model, optionally specifying which fields to include or exclude."}),"\n",(0,t.jsx)(n.p,{children:'Args:\nmode: The mode in which `to_python` should run.\nIf mode is \'json\', the output will only contain JSON serializable types.\nIf mode is \'python\', the output may contain non-JSON-serializable Python objects.\ninclude: A set of fields to include in the output.\nexclude: A set of fields to exclude from the output.\ncontext: Additional context to pass to the serializer.\nby_alias: Whether to use the field\'s alias in the dictionary key if defined.\nexclude_unset: Whether to exclude fields that have not been explicitly set.\nexclude_defaults: Whether to exclude fields that are set to their default value.\nexclude_none: Whether to exclude fields that have a value of `None`.\nround_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\nwarnings: How to handle serialization errors. False/"none" ignores them, True/"warn" logs errors,\n"error" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\nfallback: A function to call when an unknown value is encountered. If not provided,\na [`PydanticSerializationError`][pydantic_core.PydanticSerializationError] error is raised.\nserialize_as_any: Whether to serialize fields with duck-typing serialization behavior.'}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nA dictionary representation of the model."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["model_dump_json(self, *, indent: 'int | None' = None, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, context: 'Any | None' = None, by_alias: 'bool | None' = None, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, fallback: 'Callable[[Any], Any] | None' = None, serialize_as_any: 'bool' = False) -> 'str'","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'!!! abstract "Usage Documentation"\n`model_dump_json`'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Generates a JSON representation of the model using Pydantic's `to_json` method."}),"\n",(0,t.jsx)(n.p,{children:'Args:\nindent: Indentation to use in the JSON output. If None is passed, the output will be compact.\ninclude: Field(s) to include in the JSON output.\nexclude: Field(s) to exclude from the JSON output.\ncontext: Additional context to pass to the serializer.\nby_alias: Whether to serialize using field aliases.\nexclude_unset: Whether to exclude fields that have not been explicitly set.\nexclude_defaults: Whether to exclude fields that are set to their default value.\nexclude_none: Whether to exclude fields that have a value of `None`.\nround_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].\nwarnings: How to handle serialization errors. False/"none" ignores them, True/"warn" logs errors,\n"error" raises a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError].\nfallback: A function to call when an unknown value is encountered. If not provided,\na [`PydanticSerializationError`][pydantic_core.PydanticSerializationError] error is raised.\nserialize_as_any: Whether to serialize fields with duck-typing serialization behavior.'}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nA JSON string representation of the model."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["model_post_init(self, context: 'Any', /) -> 'None'","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Override this method to perform additional initialization after `",(0,t.jsx)(n.strong,{children:"init"}),"` and `model_construct`.\nThis is useful if you want to do some validation that requires the entire model to be initialized."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"vacroutesfastapi",children:"VACRoutesFastAPI"}),"\n",(0,t.jsx)(n.p,{children:"FastAPI implementation of VAC routes with streaming support and extensible MCP integration."}),"\n",(0,t.jsx)(n.p,{children:"This class provides a comprehensive FastAPI application with:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"VAC (Virtual Agent Computer) endpoints for AI chat and streaming"}),"\n",(0,t.jsx)(n.li,{children:"OpenAI-compatible API endpoints"}),"\n",(0,t.jsx)(n.li,{children:"Extensible MCP (Model Context Protocol) server integration for Claude Desktop/Code"}),"\n",(0,t.jsx)(n.li,{children:"MCP client support for connecting to external MCP servers"}),"\n",(0,t.jsx)(n.li,{children:"A2A (Agent-to-Agent) protocol support"}),"\n",(0,t.jsx)(n.li,{children:"Server-Sent Events (SSE) streaming capabilities"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsx)(n.h3,{id:"1-vac-endpoints",children:"1. VAC Endpoints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"/vac/&#123;vector_name&#125;"})," - Non-streaming VAC responses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"/vac/streaming/&#123;vector_name&#125;"})," - Plain text streaming responses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"/vac/streaming/&#123;vector_name&#125;/sse"})," - Server-Sent Events streaming"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-openai-compatible-api",children:"2. OpenAI Compatible API"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"/openai/v1/chat/completions"})," - OpenAI-compatible chat completions"]}),"\n",(0,t.jsx)(n.li,{children:"Supports both streaming and non-streaming modes"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-mcp-integration",children:"3. MCP Integration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MCP Server"}),": Expose your VAC as MCP tools for Claude Desktop/Code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MCP Client"}),": Connect to external MCP servers and use their tools"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Custom Tools"}),": Easily add your own MCP tools using decorators"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-a2a-agent-protocol",children:"4. A2A Agent Protocol"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Agent discovery and task execution"}),"\n",(0,t.jsx)(n.li,{children:"Compatible with multi-agent workflows"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"simplified-setup-recommended",children:"Simplified Setup (Recommended)"}),"\n",(0,t.jsx)(n.p,{children:"Use the helper method for automatic lifespan management:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sunholo.agents.fastapi import VACRoutesFastAPI\n\nasync def my_stream_interpreter(question, vector_name, chat_history, callback, **kwargs):\n    # Your streaming VAC logic here\n    # Use callback.async_on_llm_new_token(token) for streaming\n    return &#123;"answer": "Response", "sources": []&#125;\n\n# Single call sets up everything with MCP server and proper lifespan management\napp, vac_routes = VACRoutesFastAPI.create_app_with_mcp(\n    title="My VAC Application",\n    stream_interpreter=my_stream_interpreter\n    # MCP server is automatically enabled when using this method\n)\n\n# Add custom endpoints if needed\n@app.get("/custom")\nasync def custom_endpoint():\n    return &#123;"message": "Hello"&#125;\n\n# Run the app\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"manual-setup-advanced",children:"Manual Setup (Advanced)"}),"\n",(0,t.jsx)(n.p,{children:"For more control over lifespan management:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from contextlib import asynccontextmanager\nfrom fastapi import FastAPI\nfrom sunholo.agents.fastapi import VACRoutesFastAPI\n\nasync def my_stream_interpreter(question, vector_name, chat_history, callback, **kwargs):\n    return &#123;"answer": "Response", "sources": []&#125;\n\n# Define your app\'s lifespan\n@asynccontextmanager\nasync def app_lifespan(app: FastAPI):\n    print("Starting up...")\n    yield\n    print("Shutting down...")\n\n# Create temp app to get MCP lifespan\ntemp_app = FastAPI()\nvac_routes_temp = VACRoutesFastAPI(\n    temp_app,\n    stream_interpreter=my_stream_interpreter,\n    enable_mcp_server=True\n)\n\n# Get MCP lifespan\nmcp_lifespan = vac_routes_temp.get_mcp_lifespan()\n\n# Combine lifespans\n@asynccontextmanager\nasync def combined_lifespan(app: FastAPI):\n    async with app_lifespan(app):\n        if mcp_lifespan:\n            async with mcp_lifespan(app):\n                yield\n        else:\n            yield\n\n# Create app with combined lifespan\napp = FastAPI(title="My VAC Application", lifespan=combined_lifespan)\n\n# Initialize VAC routes\nvac_routes = VACRoutesFastAPI(\n    app=app,\n    stream_interpreter=my_stream_interpreter,\n    enable_mcp_server=True\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Your FastAPI app now includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"All VAC endpoints"}),"\n",(0,t.jsx)(n.li,{children:"MCP server at /mcp (for Claude Desktop/Code to connect)"}),"\n",(0,t.jsx)(n.li,{children:"Built-in VAC tools: vac_stream, vac_query, list_available_vacs, get_vac_info"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"adding-custom-mcp-tools",children:"Adding Custom MCP Tools"}),"\n",(0,t.jsx)(n.h3,{id:"method-1-using-decorators",children:"Method 1: Using Decorators"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"vac_routes = VACRoutesFastAPI(app, stream_interpreter, enable_mcp_server=True)\n\n@vac_routes.add_mcp_tool\nasync def get_weather(city: str) -&gt; str:\n    '''Get weather information for a city.'''\n    # Your weather API logic\n    return f\"Weather in &#123;city&#125;: Sunny, 22\xb0C\"\n\n@vac_routes.add_mcp_tool(\"custom_search\", \"Search our database\")\nasync def search_database(query: str, limit: int = 10) -&gt; list:\n    '''Search internal database with custom name and description.'''\n    # Your database search logic\n    return [&#123;\"result\": f\"Found: &#123;query&#125;\"&#125;]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"method-2-programmatic-registration",children:"Method 2: Programmatic Registration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def my_business_tool(param: str) -&gt; dict:\n    return &#123;"processed": param&#125;\n\n# Add tool with custom name and description\nvac_routes.add_mcp_tool(\n    my_business_tool, \n    "process_business_data", \n    "Process business data with our custom logic"\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"method-3-advanced-mcp-server-access",children:"Method 3: Advanced MCP Server Access"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Get direct access to MCP server for advanced customization\nmcp_server = vac_routes.get_mcp_server()\n\n@mcp_server.add_tool\nasync def advanced_tool(complex_param: dict) -&gt; str:\n    return f"Advanced processing: &#123;complex_param&#125;"\n\n# List all registered tools\nprint("Available MCP tools:", vac_routes.list_mcp_tools())\n'})}),"\n",(0,t.jsx)(n.h2,{id:"mcp-client-integration",children:"MCP Client Integration"}),"\n",(0,t.jsx)(n.p,{children:"Connect to external MCP servers and use their tools:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'mcp_servers = [\n    &#123;\n        "name": "filesystem-server",\n        "command": "npx",\n        "args": ["@modelcontextprotocol/server-filesystem", "/path/to/files"]\n    &#125;\n]\n\nvac_routes = VACRoutesFastAPI(\n    app, stream_interpreter,\n    mcp_servers=mcp_servers,  # Connect to external MCP servers\n    enable_mcp_server=True    # Also expose our own MCP server\n)\n\n# External MCP tools available at:\n# GET /mcp/tools - List all external tools\n# POST /mcp/call - Call external MCP tools\n'})}),"\n",(0,t.jsx)(n.h2,{id:"claude-desktop-integration",children:"Claude Desktop Integration"}),"\n",(0,t.jsx)(n.h3,{id:"option-1-remote-integration-recommended-for-development",children:"Option 1: Remote Integration (Recommended for Development)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Run your FastAPI app\nuvicorn.run(vac_routes.app, host="0.0.0.0", port=8000)\n\n# Configure Claude Desktop (Settings &gt; Connectors &gt; Add custom connector):\n# URL: http://localhost:8000/mcp\n'})}),"\n",(0,t.jsx)(n.h3,{id:"option-2-local-integration",children:"Option 2: Local Integration"}),"\n",(0,t.jsx)(n.p,{children:"Create a standalone script for Claude Desktop:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# claude_mcp_server.py\nfrom sunholo.mcp.extensible_mcp_server import create_mcp_server\n\nserver = create_mcp_server("my-app", include_vac_tools=True)\n\n@server.add_tool\nasync def my_app_tool(param: str) -&gt; str:\n    return f"My app processed: &#123;param&#125;"\n\nif __name__ == "__main__":\n    server.run()\n\n# Install: fastmcp install claude-desktop claude_mcp_server.py --with sunholo[anthropic]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"available-built-in-mcp-tools",children:"Available Built-in MCP Tools"}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"enable_mcp_server=True"}),", these tools are automatically available:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"vac_stream"})}),": Stream responses from any configured VAC"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"vac_query"})}),": Query VACs with non-streaming responses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"list_available_vacs"})}),": List all available VAC configurations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"get_vac_info"})}),": Get detailed information about a specific VAC"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling-and-best-practices",children:"Error Handling and Best Practices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@vac_routes.add_mcp_tool\nasync def robust_tool(user_input: str) -&gt; str:\n    \'\'\'Example of robust tool implementation.\'\'\'\n    try:\n        # Validate input\n        if not user_input or len(user_input) &gt; 1000:\n            return "Error: Invalid input length"\n        \n        # Your business logic\n        result = await process_user_input(user_input)\n        \n        return f"Processed: &#123;result&#125;"\n        \n    except Exception as e:\n        # Log error and return user-friendly message\n        log.error(f"Tool error: &#123;e&#125;")\n        return f"Error processing request: &#123;str(e)&#125;"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"vac_routes = VACRoutesFastAPI(\n    app=app,\n    stream_interpreter=my_stream_func,\n    vac_interpreter=my_vac_func,           # Optional non-streaming function\n    additional_routes=[],                   # Custom FastAPI routes\n    mcp_servers=[],                        # External MCP servers to connect to\n    add_langfuse_eval=True,                # Enable Langfuse evaluation\n    enable_mcp_server=True,                # Enable MCP server for Claude\n    enable_a2a_agent=False,                # Enable A2A agent protocol\n    a2a_vac_names=None                     # VACs available for A2A\n)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"init"}),"(self, app: 'FastAPI', stream_interpreter: 'Callable', vac_interpreter: 'Optional[Callable]' = None, additional_routes: 'Optional[List[Dict]]' = None, mcp_servers: 'Optional[List[Dict[str, Any]]]' = None, add_langfuse_eval: 'bool' = True, enable_a2a_agent: 'bool' = False, a2a_vac_names: 'Optional[List[str]]' = None)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initialize FastAPI VAC routes with comprehensive AI and MCP integration."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Args:\napp: FastAPI application instance to register routes on\nstream_interpreter: Function for streaming VAC responses. Can be async or sync.\nCalled with (question, vector_name, chat_history, callback, **kwargs)\nvac_interpreter: Optional function for non-streaming VAC responses. If not provided,\nwill use stream_interpreter without streaming callbacks.\nadditional_routes: List of custom route dictionaries to register:\n[{"path": "/custom", "handler": func, "methods": ["GET"]}]\nmcp_servers: List of external MCP server configurations to connect to:\n[{"name": "server-name", "command": "python", "args": ["server.py"]}]\nadd_langfuse_eval: Whether to enable Langfuse evaluation and tracing\nenable_a2a_agent: Whether to enable A2A (Agent-to-Agent) protocol endpoints\na2a_vac_names: List of VAC names available for A2A agent interactions'}),"\n",(0,t.jsx)(n.h2,{id:"stream-interpreter-function",children:"Stream Interpreter Function"}),"\n",(0,t.jsx)(n.p,{children:"Your stream_interpreter should handle streaming responses:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def my_stream_interpreter(question: str, vector_name: str, \n                              chat_history: list, callback, **kwargs):\n    # Process the question using your AI/RAG pipeline\n    \n    # For streaming tokens:\n    await callback.async_on_llm_new_token("partial response...")\n    \n    # Return final result with sources:\n    return &#123;\n        "answer": "Final complete answer",\n        "sources": [&#123;"title": "Source 1", "url": "..."&#125;]\n    &#125;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"mcp-server-integration",children:"MCP Server Integration"}),"\n",(0,t.jsx)(n.p,{children:"When VACMCPServer is available, the following happens automatically:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"MCP server is mounted at /mcp/mcp endpoint (NOTE: /mcp/mcp not /mcp!)"}),"\n",(0,t.jsxs)(n.li,{children:["Built-in VAC tools are automatically registered:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"vac_stream, vac_query, list_available_vacs, get_vac_info"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"You can add custom MCP tools using add_mcp_tool()"}),"\n",(0,t.jsxs)(n.li,{children:["Claude Desktop/Code can connect to ",(0,t.jsx)(n.a,{href:"http://your-server/mcp/mcp",children:"http://your-server/mcp/mcp"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'IMPORTANT: The endpoint is /mcp/mcp to avoid the MCP app intercepting other routes.\nDO NOT change the mounting point to "" (root) as it will break other FastAPI routes!'}),"\n",(0,t.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'app = FastAPI(title="My VAC Application")\n\nasync def my_vac_logic(question, vector_name, chat_history, callback, **kwargs):\n    # Your AI/RAG implementation\n    result = await process_with_ai(question)\n    return &#123;"answer": result, "sources": []&#125;\n\n# External MCP servers to connect to\nexternal_mcp = [\n    &#123;"name": "filesystem", "command": "mcp-server-fs", "args": ["/data"]&#125;\n]\n\nvac_routes = VACRoutesFastAPI(\n    app=app,\n    stream_interpreter=my_vac_logic,\n    mcp_servers=external_mcp,\n    enable_mcp_server=True  # Enable for Claude integration\n)\n\n# Add custom MCP tools for your business logic\n@vac_routes.add_mcp_tool\nasync def get_customer_info(customer_id: str) -&gt; dict:\n    return await fetch_customer(customer_id)\n\n# Your app now has:\n# - VAC endpoints: /vac/&#123;vector_name&#125;, /vac/streaming/&#123;vector_name&#125;\n# - OpenAI API: /openai/v1/chat/completions\n# - MCP server: /mcp (with built-in + custom tools)\n# - MCP client: /mcp/tools, /mcp/call (for external servers)\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_get_or_create_a2a_agent(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get or create the A2A agent instance with current request context."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_initialize_mcp_servers(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initialize connections to configured MCP servers."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_register_custom_tools(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Register any custom tools that were added before MCP server initialization."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_setup_lifespan(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Set up lifespan context manager for app initialization."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"add_mcp_resource(self, func: 'Callable', name: 'str' = None, description: 'str' = None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Add a custom MCP resource to the server."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nfunc: The resource function\nname: Optional custom name for the resource\ndescription: Optional description (uses docstring if not provided)"}),"\n",(0,t.jsx)(n.p,{children:"Example:\n@app.add_mcp_resource\nasync def my_custom_resource(uri: str) -> str:\n'''Custom resource that provides data.'''\nreturn f\"Resource data for: {uri}\""}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["add_mcp_tool(self, func: 'Callable', name: 'str' = None, description: 'str' = None)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Add a custom MCP tool to the server."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nfunc: The tool function\nname: Optional custom name for the tool\ndescription: Optional description (uses docstring if not provided)"}),"\n",(0,t.jsx)(n.p,{children:"Example:\n@app.add_mcp_tool\nasync def my_custom_tool(param: str) -> str:\n'''Custom tool that does something useful.'''\nreturn f\"Result: {param}\""}),"\n",(0,t.jsx)(n.h1,{id:"or-with-custom-name-and-description",children:"Or with custom name and description"}),"\n",(0,t.jsx)(n.p,{children:'app.add_mcp_tool(my_function, "custom_name", "Custom description")'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["create_app_with_mcp(title: 'str' = 'VAC Application', stream_interpreter: 'Optional[callable]' = None, vac_interpreter: 'Optional[callable]' = None, app_lifespan: 'Optional[callable]' = None, **kwargs) -> \"tuple[FastAPI, 'VACRoutesFastAPI']\"","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Helper method to create a FastAPI app with proper MCP lifespan management."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This method simplifies the setup process by handling the lifespan combination\nautomatically, avoiding the need for the double initialization pattern.\nMCP server is automatically enabled when using this method."}),"\n",(0,t.jsxs)(n.p,{children:["Args:\ntitle: Title for the FastAPI app\nstream_interpreter: Streaming interpreter function\nvac_interpreter: Non-streaming interpreter function",(0,t.jsx)(n.br,{}),"\n","app_lifespan: Optional app lifespan context manager\n**kwargs: Additional arguments passed to VACRoutesFastAPI"]}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nTuple of (FastAPI app, VACRoutesFastAPI instance)"}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from sunholo.agents.fastapi import VACRoutesFastAPI\n\nasync def my_interpreter(question, vector_name, chat_history, callback, **kwargs):\n    # Your logic here\n    return &#123;"answer": "response", "sources": []&#125;\n\n# Single call to set up everything (MCP is automatically enabled)\napp, vac_routes = VACRoutesFastAPI.create_app_with_mcp(\n    title="My VAC App",\n    stream_interpreter=my_interpreter\n)\n\n# Add custom endpoints\n@app.get("/custom")\nasync def custom_endpoint():\n    return &#123;"message": "Custom endpoint"&#125;\n\nif __name__ == "__main__":\n    import uvicorn\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["get_mcp_lifespan(self)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get the MCP app's lifespan for manual lifespan management."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nThe MCP app's lifespan if MCP server is enabled, None otherwise."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from contextlib import asynccontextmanager\n\n# Create temp app to get MCP lifespan\ntemp_app = FastAPI()\nvac_routes = VACRoutesFastAPI(temp_app, ..., enable_mcp_server=True)\nmcp_lifespan = vac_routes.get_mcp_lifespan()\n\n# Combine with your app's lifespan\n@asynccontextmanager\nasync def combined_lifespan(app: FastAPI):\n    async with my_app_lifespan(app):\n        if mcp_lifespan:\n            async with mcp_lifespan(app):\n                yield\n        else:\n            yield\n\napp = FastAPI(lifespan=combined_lifespan)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["get_mcp_server(self)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get the MCP server instance for advanced customization."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nVACMCPServer instance or None if MCP server is not enabled"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_a2a_agent_card(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle A2A agent card discovery request."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_a2a_push_notification(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle A2A push notification settings."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_a2a_task_cancel(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle A2A task cancel request."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_a2a_task_get(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle A2A task get request."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_a2a_task_send(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle A2A task send request."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_a2a_task_send_subscribe(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle A2A task send with subscription (SSE)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_mcp_call_tool(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Call an MCP tool."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_mcp_list_resources(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"List available MCP resources."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_mcp_list_tools(self, server_name: 'Optional[str]' = None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"List available MCP tools."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_mcp_read_resource(self, request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Read an MCP resource."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_openai_compatible(self, request: 'Request', vector_name: 'Optional[str]' = None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle OpenAI-compatible chat completion requests."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_process_vac(self, vector_name: 'str', request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle non-streaming VAC requests."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_stream_vac(self, vector_name: 'str', request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle streaming VAC requests with plain text response.\nCompatible with Flask implementation."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"handle_stream_vac_sse(self, vector_name: 'str', request: 'Request')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handle streaming VAC requests with Server-Sent Events format.\nBetter for browser-based clients."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"health(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Health check endpoint."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"home(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Home endpoint."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"list_mcp_resources(self) -> 'List[str]'"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"List all registered MCP resources."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nList of resource names"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["list_mcp_tools(self) -> 'List[str]'","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"List all registered MCP tools."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nList of tool names"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"openai_health(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"OpenAI health check endpoint."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"prep_vac_async(self, vac_request: 'VACRequest', vector_name: 'str')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Prepare VAC request data asynchronously."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"register_routes(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Register all VAC routes with the FastAPI application."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"vac_interpreter_default(self, question: 'str', vector_name: 'str', chat_history=None, **kwargs)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Default VAC interpreter that uses the stream interpreter without streaming."}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);
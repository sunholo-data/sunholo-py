"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3815],{1155:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>g,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var t=l(4848),o=l(8453);const s={},r="custom_logging.py",i={id:"src/sunholo/custom_logging",title:"custom_logging.py",description:"Source: src/sunholo/customlogging.py",source:"@site/docs/src/sunholo/custom_logging.md",sourceDirName:"src/sunholo",slug:"/src/sunholo/custom_logging",permalink:"/docs/src/sunholo/custom_logging",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/custom_logging.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"vectorstore.py",permalink:"/docs/src/sunholo/components/vectorstore"},next:{title:"database.py",permalink:"/docs/src/sunholo/database/"}},g={},c=[{value:"Functions",id:"functions",level:2},{value:"get_logger()",id:"get_logger",level:3},{value:"is_logging_setup(logger=None)",id:"is_logging_setuploggernone",level:3},{value:"log_folder_location(folder_name)",id:"log_folder_locationfolder_name",level:3},{value:"safe_log_struct(log, severity, message, struct)",id:"safe_log_structlog-severity-message-struct",level:3},{value:"setup_logging(logger_name=None, log_level=20, project_id=None)",id:"setup_logginglogger_namenone-log_level20-project_idnone",level:3},{value:"Classes",id:"classes",level:2},{value:"GoogleCloudLogging",id:"googlecloudlogging",level:3},{value:"StandardLoggerWrapper",id:"standardloggerwrapper",level:3}];function a(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"custom_loggingpy",children:"custom_logging.py"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Source"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/custom_logging.py",children:"src/sunholo/custom_logging.py"})]}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"get_logger",children:"get_logger()"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h3,{id:"is_logging_setuploggernone",children:"is_logging_setup(logger=None)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h3,{id:"log_folder_locationfolder_name",children:"log_folder_location(folder_name)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h3,{id:"safe_log_structlog-severity-message-struct",children:"safe_log_struct(log, severity, message, struct)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h3,{id:"setup_logginglogger_namenone-log_level20-project_idnone",children:"setup_logging(logger_name=None, log_level=20, project_id=None)"}),"\n",(0,t.jsx)(n.p,{children:"Sets up Google Cloud Logging with the provided log level and project ID. If no project ID\nis provided, it attempts to retrieve the project ID from the metadata server."}),"\n",(0,t.jsx)(n.p,{children:"Parameters:\nlogger_name (str): The name of the log to send to. If not provided, set to run.googleapis.com%2Fstderr\nlog_level: The logging level to capture. Uses Python's logging module levels.\nDefault is log.INFO.\nproject_id: A string representing the Google Cloud project ID. If None, the project ID\nwill be retrieved from the metadata server."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.h1,{id:"set-up-google-cloud-logging-for-the-script-with-default-info-level",children:"Set up Google Cloud Logging for the script with default INFO level"}),"\n",(0,t.jsx)(n.p,{children:"setup_logging()"}),"\n",(0,t.jsx)(n.h1,{id:"now-you-can-use-pythons-logging-module-as-usual",children:"Now you can use Python's logging module as usual"}),"\n",(0,t.jsx)(n.p,{children:"import logging\nlog.info('This is an info message that will be sent to Google Cloud log.')"}),"\n",(0,t.jsx)(n.h1,{id:"basic-structured-logging",children:"Basic structured logging"}),"\n",(0,t.jsx)(n.p,{children:'log.info(log_struct={"action": "user_login", "user_id": "12345"})'}),"\n",(0,t.jsx)(n.h1,{id:"structured-logging-with-trace-id",children:"Structured logging with trace ID"}),"\n",(0,t.jsx)(n.p,{children:'log.update_trace_id("abc-123")\nlog.info(log_struct={"action": "process_started", "file_count": 42})'}),"\n",(0,t.jsx)(n.h1,{id:"this-will-include-trace_id-abc-123-in-the-logged-structure",children:'This will include trace_id: "abc-123" in the logged structure'}),"\n",(0,t.jsx)(n.h1,{id:"logging-with-both-text-and-structure",children:"Logging with both text and structure"}),"\n",(0,t.jsx)(n.p,{children:'log.info(\nlog_text="Processing completed successfully",\nlog_struct={"duration_ms": 1234, "items_processed": 100}\n)'}),"\n",(0,t.jsx)(n.h1,{id:"logging-error-with-structured-context",children:"Logging error with structured context"}),"\n",(0,t.jsx)(n.p,{children:"try:"}),"\n",(0,t.jsx)(n.h1,{id:"some-operation",children:"Some operation"}),"\n",(0,t.jsxs)(n.p,{children:['process_data()\nexcept Exception as e:\nlog.error(\nlog_text=f"Error processing data: {str(e)}",\nlog_struct={\n"error_type": type(e).',(0,t.jsx)(n.strong,{children:"name"}),',\n"file_name": "example.csv",\n"line_number": 42\n}\n)']}),"\n",(0,t.jsx)(n.h1,{id:"more-complex-structured-logging",children:"More complex structured logging"}),"\n",(0,t.jsx)(n.p,{children:'log.info(log_struct={\n"request": {\n"method": "POST",\n"path": "/api/data",\n"user_agent": "Mozilla/5.0...",\n"ip": "192.168.1.1"\n},\n"response": {\n"status_code": 200,\n"processing_time_ms": 345,\n"bytes_sent": 1024\n},\n"metadata": {\n"version": "1.2.3",\n"environment": "production"\n}\n})'}),"\n",(0,t.jsx)(n.p,{children:"Note:\nThis function requires that the 'google-cloud-logging' library is installed and\nthat the application is authenticated with Google Cloud. This can be done by setting\nthe GOOGLE_APPLICATION_CREDENTIALS environment variable to the path of your service\naccount key file, or by running this code in an environment where default\napplication credentials are already set, such as Google Cloud Compute Engine,\nGoogle Kubernetes Engine, Google App Engine, etc."}),"\n",(0,t.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,t.jsx)(n.h3,{id:"googlecloudlogging",children:"GoogleCloudLogging"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"init"}),"(self, project_id=None, log_level=20, logger_name=None)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initialize self.  See help(type(self)) for accurate signature."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"new"}),"(cls, project_id=None, log_level=20, logger_name=None)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create and return a new object.  See help(type) for accurate signature."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_add_trace_to_struct(self, log_struct)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Adds trace ID to structured log data if available."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nlog_struct (dict): The structured log data."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\ndict: Log structure with trace ID added if available."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["_append_trace_id(self, log_text)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Appends trace ID to log text if available."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nlog_text (str): The log message."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nstr: Log message with trace ID prefixed if available."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_get_caller_info(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Internal method to get caller's filename, line number, and function name."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"debug(self, log_text=None, log_struct=None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Writes a debug log entry."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nlog_text (str, optional): The debug log message as a text string. Defaults to None.\nlog_struct (dict, optional): The debug log message as structured data. Defaults to None.\nlogger_name (str, optional): The name of the logger to which to write the debug log entry."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["error(self, log_text=None, log_struct=None)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Writes an error log entry."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nlog_text (str, optional): The error log message as a text string. Defaults to None.\nlog_struct (dict, optional): The error log message as structured data. Defaults to None.\nlogger_name (str, optional): The name of the logger to which to write the error log entry."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["exception(self, log_text=None, log_struct=None)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Writes an exception log entry."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nlog_text (str, optional): The error log message as a text string. Defaults to None.\nlog_struct (dict, optional): The error log message as structured data. Defaults to None.\nlogger_name (str, optional): The name of the logger to which to write the error log entry."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["info(self, log_text=None, log_struct=None)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Writes an info log entry."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nlog_text (str, optional): The info log message as a text string. Defaults to None.\nlog_struct (dict, optional): The info log message as structured data. Defaults to None.\nlogger_name (str, optional): The name of the logger to which to write the info log entry."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["log(self, message, *args, **kwargs)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Some weird bug keeps calling this method - do not use normally"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A catch-all method to handle unexpected .log() calls on this class.\nRoutes the call to the appropriate logging method based on severity level."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"setup_logging(self, log_level=20, logger_name=None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"structured_log(self, log_text=None, log_struct=None, logger_name=None, severity='INFO')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Writes log entries to the specified logger as either text or structured data."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Args:\nlog_text (str, optional): The log message as a text string. Defaults to None.\nlog_struct (dict, optional): The log message as a dictionary for structured log. Defaults to None.\nlogger_name (str, optional): The name of the logger to which to write the log entries.\ne.g. logName="run.googleapis.com%2Fstderr"\nseverity (str, optional): The severity level of the log entry. Defaults to "INFO".'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["update_trace_id(self, trace_id)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Updates the trace ID to be included in all logs."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\ntrace_id (str): The trace ID to add to all logs."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["warning(self, log_text=None, log_struct=None)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Writes a warning log entry."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nlog_text (str, optional): The warning log message as a text string. Defaults to None.\nlog_struct (dict, optional): The warning log message as structured data. Defaults to None.\nlogger_name (str, optional): The name of the logger to which to write the warning log entry."}),"\n",(0,t.jsx)(n.h3,{id:"standardloggerwrapper",children:"StandardLoggerWrapper"}),"\n",(0,t.jsx)(n.p,{children:"A wrapper for standard Python logger that mimics the interface of GoogleCloudLogging."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"getattr"}),"(self, name)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"init"}),"(self, logger)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initialize self.  See help(type(self)) for accurate signature."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"_format_message(self, log_text=None, log_struct=None, severity=None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Format message to include structured data as JSON"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"debug(self, log_text=None, log_struct=None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"error(self, log_text=None, log_struct=None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"exception(self, log_text=None, log_struct=None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"info(self, log_text=None, log_struct=None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"set_version(self, version)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Set version to be included in all logs."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"structured_log(self, log_text=None, log_struct=None, logger_name=None, severity='INFO')"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Emulates Google Cloud's structured_log method using standard logging."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"update_trace_id(self, trace_id)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Set trace ID to be included in all logs."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"warning(self, log_text=None, log_struct=None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>i});var t=l(6540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);
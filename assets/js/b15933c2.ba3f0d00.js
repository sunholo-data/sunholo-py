"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9055],{4497:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var t=s(4848),i=s(8453);const r={},l="web_browser.py",o={id:"src/sunholo/tools/web_browser",title:"web_browser.py",description:"Source: src/sunholo/tools/webbrowser.py",source:"@site/docs/src/sunholo/tools/web_browser.md",sourceDirName:"src/sunholo/tools",slug:"/src/sunholo/tools/web_browser",permalink:"/docs/src/sunholo/tools/web_browser",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/tools/web_browser.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"tfvars_editor.py",permalink:"/docs/src/sunholo/terraform/tfvars_editor"},next:{title:"api_key.py",permalink:"/docs/src/sunholo/utils/api_key"}},c={},a=[{value:"Classes",id:"classes",level:2},{value:"BrowseWebWithImagePromptsBot",id:"browsewebwithimagepromptsbot",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"web_browserpy",children:"web_browser.py"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Source"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/tools/web_browser.py",children:"src/sunholo/tools/web_browser.py"})]}),"\n",(0,t.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,t.jsx)(n.h3,{id:"browsewebwithimagepromptsbot",children:"BrowseWebWithImagePromptsBot"}),"\n",(0,t.jsx)(n.p,{children:"BrowseWebWithImagePromptsBot is a base class for creating bots that interact with web pages using Playwright.\nThe bot can perform actions such as navigating, clicking, scrolling, typing text, and taking screenshots.\nIt also supports cookie management to maintain session state across interactions."}),"\n",(0,t.jsx)(n.p,{children:"Methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"init"}),"(session_id, website_name, browser_type='chromium', headless=True):\nInitializes the bot with the given session ID, website name, browser type, and headless mode.\nSupported browser types: 'chromium', 'firefox', 'webkit'."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"load_cookies():\nLoads cookies from a file and adds them to the browser context."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"save_cookies():\nSaves the current cookies to a file."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"navigate(url):\nNavigates to the specified URL."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"click(selector):\nClicks on the element specified by the selector."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"scroll(direction='down', amount=1):\nScrolls the page in the specified direction ('down', 'up', 'left', 'right') by the specified amount."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"type_text(selector, text):\nTypes the specified text into the element specified by the selector."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"take_screenshot():\nTakes a screenshot and saves it with a timestamp in the session-specific directory. Returns the path to the screenshot."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"get_latest_screenshot_path():\nRetrieves the path to the most recent screenshot in the session-specific directory."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"create_prompt_vars(current_action_description, session_goal):\nCreates a dictionary of prompt variables from the current action description and session goal."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'send_screenshot_to_llm(screenshot_path, current_action_description="", session_goal=""):\nEncodes the screenshot in base64, creates prompt variables, and sends them to the LLM. Returns the new instructions from the LLM.'}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"send_prompt_to_llm(prompt_vars, screenshot_base64):\nAbstract method to be implemented by subclasses. Sends the prompt variables and screenshot to the LLM and returns the response."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"close():\nSaves cookies, closes the browser, and stops Playwright."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"execute_instructions(instructions):\nExecutes the given set of instructions, takes a screenshot after each step, and sends the screenshot to the LLM for further instructions."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class ProductionBot(BrowseWebWithImagePromptsBot):\n    def send_prompt_to_llm(self, prompt_vars, screenshot_base64):\n        # Implement the actual logic to send the prompt and screenshot to the LLM and return the response\n        api_url = \"https://api.example.com/process\"  # Replace with the actual LLM API endpoint\n        headers = &#123;\"Content-Type\": \"application/json\"&#125;\n        data = &#123;\n            \"prompt\": prompt_vars,\n            \"screenshot\": screenshot_base64\n        &#125;\n        response = requests.post(api_url, headers=headers, data=json.dumps(data))\n        return response.text  # Assuming the response is in JSON format\n\n@app.route('/run-bot', methods=['POST'])\ndef run_bot():\n    data = request.json\n    session_id = data.get('session_id')\n    website_name = data.get('website_name')\n    browser_type = data.get('browser_type', 'chromium')\n    current_action_description = data.get('current_action_description', \"\")\n    session_goal = data.get('session_goal', \"\")\n    \n    bot = ProductionBot(session_id=session_id, website_name=website_name, browser_type=browser_type, headless=True)\n    \n    # Check if initial instructions are provided\n    initial_instructions = data.get('instructions')\n    if initial_instructions:\n        bot.execute_instructions(initial_instructions)\n    else:\n        bot.execute_instructions([&#123;'action':'navigate', 'url': website_name&#125;])\n    \n    # Take initial screenshot and send to LLM\n    screenshot_path = bot.take_screenshot()\n    new_instructions = bot.send_screenshot_to_llm(screenshot_path, current_action_description, session_goal)\n    bot.execute_instructions(new_instructions)\n    \n    # Take final screenshot\n    bot.take_screenshot()\n    \n    bot.close()\n    \n    return jsonify(&#123;\"status\": \"completed\", \"new_instructions\": new_instructions&#125;)\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=8080)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"init"}),"(self, website_name: str, session_id: str = None, browser_type: str = 'chromium', headless: bool = True, max_steps: int = 10)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initialize self.  See help(type(self)) for accurate signature."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"check_llm_response(self, response)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"click(self, selector)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"close(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"create_gif_from_pngs(self, frame_duration=300)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creates a GIF from a folder of PNG images."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nfolder_path (str): The path to the folder containing PNG images.\noutput_gif_path (str): The path where the output GIF will be saved.\nduration (int): Duration between frames in milliseconds."}),"\n",(0,t.jsx)(n.p,{children:"Example:\ncreate_gif_from_pngs('/path/to/png_folder', '/path/to/output.gif', duration=500)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"create_prompt_vars(self, last_message)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"execute_custom_command(self, command)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Executes a custom command on the page object."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\ncommand (str): The command string to be executed."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"execute_instructions(self, instructions: list, last_message: str = None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"get_latest_screenshot_path(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"get_locator(self, selector, by_text=True)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"get_locator_via_roles_and_placeholder(self, selector: str)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"get_locator_via_roles_and_text(self, selector: str)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"load_action_log(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"load_cookies(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"mark_screenshot(self, screenshot_bytes, mark_action)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Marks the screenshot with the specified action."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Parameters:\nscreenshot_bytes (bytes): The bytes of the screenshot.\nmark_action (dict): Action details for marking the screenshot."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"navigate(self, url)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"parse_element_part(self, element_part)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Parses the element_part string to extract the method name and its parameters."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Args:\nelement_part (str): The element part string (e.g., \"get_by_role('button')\")"}),"\n",(0,t.jsx)(n.p,{children:"Returns:\ntuple: A tuple containing the method name and a list of parameters."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"save_action_log(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"save_cookies(self)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"scroll(self, direction='down', amount=100)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"send_prompt_to_llm(self, prompt_vars, screenshot_base64)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"send_screenshot_to_llm(self, screenshot_bytes, last_message)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"start_session(self, instructions, session_goal)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"take_screenshot(self, full_page=False, mark_action=None)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"type_text(self, selector, text)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2962],{1688:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var t=s(4848),o=s(8453);const i={},a="extensions_call.py",r={id:"src/sunholo/vertex/extensions_call",title:"extensions_call.py",description:"Source: src/sunholo/vertex/extensionscall.py",source:"@site/docs/src/sunholo/vertex/extensions_call.md",sourceDirName:"src/sunholo/vertex",slug:"/src/sunholo/vertex/extensions_call",permalink:"/docs/src/sunholo/vertex/extensions_call",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/vertex/extensions_call.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"version.py",permalink:"/docs/src/sunholo/utils/version"},next:{title:"extensions_class.py",permalink:"/docs/src/sunholo/vertex/extensions_class"}},c={},l=[{value:"Functions",id:"functions",level:2},{value:"dynamic_extension_call(question, config: sunholo.utils.config_class.ConfigManager, project_id: str = None, model_name: str = &#39;models/gemini-1.5-pro&#39;, **kwargs)",id:"dynamic_extension_callquestion-config-sunholoutilsconfig_classconfigmanager-project_id-str--none-model_name-str--modelsgemini-15-pro-kwargs",level:3},{value:"get_extension_content(question: str, config: sunholo.utils.config_class.ConfigManager, project_id: str = None, **kwargs)",id:"get_extension_contentquestion-str-config-sunholoutilsconfig_classconfigmanager-project_id-str--none-kwargs",level:3},{value:"parse_extension_input(question: str, extension_id: str = None, extension_display_name: str = None, config: sunholo.utils.config_class.ConfigManager = None, project_id: str = None, model_name: str = &#39;models/gemini-1.5-pro&#39;, **kwargs)",id:"parse_extension_inputquestion-str-extension_id-str--none-extension_display_name-str--none-config-sunholoutilsconfig_classconfigmanager--none-project_id-str--none-model_name-str--modelsgemini-15-pro-kwargs",level:3},{value:"extract_nested_value(data, key)",id:"extract_nested_valuedata-key",level:3},{value:"inject_question(question, params)",id:"inject_questionquestion-params",level:3},{value:"update_nested_params(original, updates)",id:"update_nested_paramsoriginal-updates",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"extensions_callpy",children:"extensions_call.py"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Source"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/vertex/extensions_call.py",children:"src/sunholo/vertex/extensions_call.py"})]}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"dynamic_extension_callquestion-config-sunholoutilsconfig_classconfigmanager-project_id-str--none-model_name-str--modelsgemini-15-pro-kwargs",children:"dynamic_extension_call(question, config: sunholo.utils.config_class.ConfigManager, project_id: str = None, model_name: str = 'models/gemini-1.5-pro', **kwargs)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."}),"\n",(0,t.jsx)(n.h3,{id:"get_extension_contentquestion-str-config-sunholoutilsconfig_classconfigmanager-project_id-str--none-kwargs",children:"get_extension_content(question: str, config: sunholo.utils.config_class.ConfigManager, project_id: str = None, **kwargs)"}),"\n",(0,t.jsx)(n.p,{children:"Fetches content from extensions based on the provided question and configuration."}),"\n",(0,t.jsx)(n.p,{children:"Args:\nquestion (str): The question to be processed by the extensions.\nconfig (ConfigManager): The configuration manager instance.\n**kwargs: Additional parameters to be passed to the extension."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nlist: A list of responses from the extensions."}),"\n",(0,t.jsx)(n.p,{children:"Example:\nAssuming a YAML configuration file as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'kind: vacConfig\nvac:\n    my_vac:\n        extensions:\n        - extension_id: 8524997435263549440 # or extension_display_name:\n          operation_id: post_extension_invoke_one_generic\n          vac: our_generic\n          operation_params:\n            input:\n              question: ""\n              chat_history: []\n              source_filters: []\n              source_filters_and_or: false\n              search_kwargs:\n                k: 0\n                filter: ""\n                fetch_k: 0\n              private_docs: []\n              whole_document: false\n'})}),"\n",(0,t.jsx)(n.p,{children:"The function can be called as:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'config = ConfigManager()\nquestion = "What is the capital of France?"\n\nresponses = get_extension_content(\n    question=question,\n    config=config,\n    input=&#123;\n        "chat_history": [&#123;"role": "user", "content": "Hello"&#125;],\n        "source_filters": ["PPA/"],\n        "search_kwargs": &#123;"k": 50, "filter": "source ILIKE \'%GermanPolicyforPPA/%\'", "fetch_k": 100&#125;\n    &#125;\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, ",(0,t.jsx)(n.code,{children:"operation_params"})," will be updated to:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'&#123;\n    "input": &#123;\n        "question": "What is the capital of France?",\n        "chat_history": [&#123;"role": "user", "content": "Hello"&#125;],\n        "source_filters": ["PPA/"],\n        "source_filters_and_or": false,\n        "search_kwargs": &#123;\n            "k": 50,\n            "filter": "source ILIKE \'%GermanPolicyforPPA/%\'",\n            "fetch_k": 100\n        &#125;,\n        "private_docs": [],\n        "whole_document": false\n    &#125;\n&#125;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"parse_extension_inputquestion-str-extension_id-str--none-extension_display_name-str--none-config-sunholoutilsconfig_classconfigmanager--none-project_id-str--none-model_name-str--modelsgemini-15-pro-kwargs",children:"parse_extension_input(question: str, extension_id: str = None, extension_display_name: str = None, config: sunholo.utils.config_class.ConfigManager = None, project_id: str = None, model_name: str = 'models/gemini-1.5-pro', **kwargs)"}),"\n",(0,t.jsx)(n.p,{children:"Takes a question and kwargs and makes an LLM call to extract parameters for an extension call.\nIf no parameters are found, returns None\nOnce parameters are extracted, makes the call to the extension via get_extenstion_content()"}),"\n",(0,t.jsx)(n.p,{children:"Example:\nAssuming an OpenAPI configuration file as follows:"}),"\n",(0,t.jsx)(n.h3,{id:"extract_nested_valuedata-key",children:"extract_nested_value(data, key)"}),"\n",(0,t.jsx)(n.p,{children:"Recursively extract a value from nested dictionaries based on the specified key or a dot-separated key path.\nIf the key is not dot-separated, it will find the first occurrence of that key in the nested dictionaries."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ndata (dict): The dictionary to extract the value from.\nkey (str): The key or dot-separated key path to extract the value."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nAny: The extracted value, or None if the key or key path is not found."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'data = &#123;\n    "output": &#123;\n        "content": "Some content",\n        "metadata": &#123;"key1": "value1"&#125;\n    &#125;\n&#125;\n\nvalue = extract_nested_value(data, "content")\n# value will be "Some content"\n\nvalue = extract_nested_value(data, "output.metadata")\n# value will be &#123;"key1": "value1"&#125;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"inject_questionquestion-params",children:"inject_question(question, params)"}),"\n",(0,t.jsx)(n.p,{children:"Recursively injects the question into nested dictionaries where the key is 'question' and the value is empty."}),"\n",(0,t.jsx)(n.p,{children:"Args:\nquestion (str): The question to be injected.\nparams (dict): The dictionary where the question should be injected."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\ndict: The dictionary with the question injected."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'params = &#123;\n    "input": &#123;\n        "question": "",\n        "chat_history": [],\n        "source_filters": [],\n        "search_kwargs": &#123;\n            "k": 0,\n            "filter": "",\n            "fetch_k": 0\n        &#125;,\n        "private_docs": [],\n        "whole_document": false\n    &#125;\n&#125;\n\nquestion = "What is the capital of France?"\n\nupdated_params = inject_question(question, params)\n\n# updated_params will be:\n# &#123;\n#     "input": &#123;\n#         "question": "What is the capital of France?",\n#         "chat_history": [],\n#         "source_filters": [],\n#         "search_kwargs": &#123;\n#             "k": 0,\n#             "filter": "",\n#             "fetch_k": 0\n#         &#125;,\n#         "private_docs": [],\n#         "whole_document": false\n#     &#125;\n# &#125;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"update_nested_paramsoriginal-updates",children:"update_nested_params(original, updates)"}),"\n",(0,t.jsx)(n.p,{children:"Recursively update nested dictionaries with new values."}),"\n",(0,t.jsx)(n.p,{children:"Args:\noriginal (dict): The original dictionary to be updated.\nupdates (dict): The new values to be merged into the original dictionary."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\ndict: The updated dictionary."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'original = &#123;\n    "param1": "value1",\n    "nested_param": &#123;\n        "sub_param1": "sub_value1"\n    &#125;\n&#125;\n\nupdates = &#123;\n    "param1": "new_value1",\n    "nested_param": &#123;\n        "sub_param1": "new_sub_value1"\n    &#125;\n&#125;\n\nupdated_params = update_nested_params(original, updates)\n\n# updated_params will be:\n# &#123;\n#     "param1": "new_value1",\n#     "nested_param": &#123;\n#         "sub_param1": "new_sub_value1"\n#     &#125;\n# &#125;\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2517],{8410:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>x,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var i=s(4848),l=s(8453);const r={},t="extensions_class.py",o={id:"src/sunholo/vertex/extensions_class",title:"extensions_class.py",description:"Source: src/sunholo/vertex/extensionsclass.py",source:"@site/docs/src/sunholo/vertex/extensions_class.md",sourceDirName:"src/sunholo/vertex",slug:"/src/sunholo/vertex/extensions_class",permalink:"/docs/src/sunholo/vertex/extensions_class",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/vertex/extensions_class.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"extensions_call.py",permalink:"/docs/src/sunholo/vertex/extensions_call"},next:{title:"genai_functions.py",permalink:"/docs/src/sunholo/vertex/genai_functions"}},c={},a=[{value:"Classes",id:"classes",level:2},{value:"VertexAIExtensions",id:"vertexaiextensions",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"extensions_classpy",children:"extensions_class.py"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Source"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/vertex/extensions_class.py",children:"src/sunholo/vertex/extensions_class.py"})]}),"\n",(0,i.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,i.jsx)(n.h3,{id:"vertexaiextensions",children:"VertexAIExtensions"}),"\n",(0,i.jsx)(n.p,{children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from sunholo.vertex import VertexAIExtensions\nvex = VertexAIExtensions(project_id='your-project')\nvex.list_extensions()\n# [&#123;'resource_name': 'projects/374404277595/locations/us-central1/extensions/770924776838397952', \n#   'display_name': 'Code Interpreter', \n#   'description': 'N/A'&#125;]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Creating an extension example as per:\n",(0,i.jsx)(n.a,{href:"https://cloud.google.com/vertex-ai/generative-ai/docs/extensions/create-extension",children:"https://cloud.google.com/vertex-ai/generative-ai/docs/extensions/create-extension"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"## validates before upload\nvex.upload_openapi_file(\"your-extension-name.yaml\")\nvex.openapi_file_gcs\n# 'gs://your-extensions-bucket/your-extension-name.yaml'\n\n## load in examples to be used by creation later\nvex.load_tool_use_examples('your-examples.yaml')\n\nvex.create_extension(\n    \"My New Extension\", \n    description=\"Querying the VAC above my database\", \n    service_account='sa-serviceaccount@my-project.iam.gserviceaccount.com')\n"})}),"\n",(0,i.jsx)(n.p,{children:"Call the extension"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'operation_params = &#123;"input": &#123;"question":"This needs to be in same schema as your openapi spec"&#125;\nvex.execute_extension("an_operation_id_from_your_openai_spec", \n                      operation_params = operation_params)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"init"}),"(self, project_id=None)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Initialize self.  See help(type(self)) for accurate signature."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"create_extension(self, display_name: str, description: str, open_api_file: str = None, tool_example_file: str = None, runtime_config: dict = None, service_account: str = None, bucket_name: str = None, vac: str = None)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"create_extension_manifest(self, display_name, description, open_api_gcs_uri: str, service_account: str)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"execute_code_extension(self, query: str, filenames: list[str] = None, gcs_files: list[str] = None, bucket_name: str = None)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"execute_extension(self, operation_id: str, operation_params: dict, extension_id: str = None, extension_display_name: str = None, vac: str = None)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"get_auth_token(self)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"get_extension(self, extension_id: str = None, extension_display_name: str = None)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Resolves the extension_id from the Display Name if not given."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Returns:\nExtension object"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"get_openapi_spec(self, extension_id: str = None, extension_display_name: str = None)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gets the openapi spec file for an extension"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"list_extensions(self)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"load_tool_use_examples(self, filename: str)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"parse_files_to_html(self, outputFiles, save_files_locally=True)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"process_response(self, response: dict, save_file_name=None) -> str"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"update_tool_use_examples_via_patch(self)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"upload_openapi_file(self, filename: str, extension_name: str, vac: str = None)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"upload_to_gcs(self, filename)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"validate_extension_id(self, ext_id: str)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensures the passed string fits the criteria for an extension ID.\nIf not, changes it so it will be."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Criteria:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Length should be 4-63 characters."}),"\n",(0,i.jsx)(n.li,{children:'Valid characters are lowercase letters, numbers, and hyphens ("-").'}),"\n",(0,i.jsx)(n.li,{children:"Should start with a number or a lowercase letter."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Args:\next_id (str): The extension ID to validate and correct."}),"\n",(0,i.jsx)(n.p,{children:"Returns:\nstr: The validated and corrected extension ID."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["validate_openapi(self, filename)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No docstring available."}),"\n"]}),"\n"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var i=s(6540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
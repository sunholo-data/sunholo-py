"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8618],{2248:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=s(4848),r=s(8453);const a={},i="langserve.py",o={id:"src/sunholo/streaming/langserve",title:"langserve.py",description:"Source: src/sunholo/streaming/langserve.py",source:"@site/docs/src/sunholo/streaming/langserve.md",sourceDirName:"src/sunholo/streaming",slug:"/src/sunholo/streaming/langserve",permalink:"/docs/src/sunholo/streaming/langserve",draft:!1,unlisted:!1,editUrl:"https://github.com/sunholo-data/sunholo-py/tree/main/docs/docs/src/sunholo/streaming/langserve.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"content_buffer.py",permalink:"/docs/src/sunholo/streaming/content_buffer"},next:{title:"stream_lookup.py",permalink:"/docs/src/sunholo/streaming/stream_lookup"}},l={},c=[{value:"Functions",id:"functions",level:2},{value:"parse_langserve_token(token)",id:"parse_langserve_tokentoken",level:3},{value:"parse_langserve_token_async(token)",id:"parse_langserve_token_asynctoken",level:3},{value:"accumulate_json_lines(lines, start_index, run_id)",id:"accumulate_json_lineslines-start_index-run_id",level:3},{value:"parse_json_data(json_data: dict)",id:"parse_json_datajson_data-dict",level:3},{value:"process_langserve_lines(lines, run_id)",id:"process_langserve_lineslines-run_id",level:3},{value:"process_langserve_lines_async(lines, run_id)",id:"process_langserve_lines_asynclines-run_id",level:3},{value:"set_metadata_value(lines)",id:"set_metadata_valuelines",level:3}];function d(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"langservepy",children:"langserve.py"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Source"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/sunholo-data/sunholo-py/blob/main/src/sunholo/streaming/langserve.py",children:"src/sunholo/streaming/langserve.py"})]}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"parse_langserve_tokentoken",children:"parse_langserve_token(token)"}),"\n",(0,t.jsx)(n.p,{children:"Parses the token to accumulate content from JSON for 'event: data' events,\nhandling JSON strings split between two tokens."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ntoken (str or bytes): The token to parse."}),"\n",(0,t.jsx)(n.p,{children:"Returns:\nGenerator of str: A generator that yields accumulated contents from 'event: data'."}),"\n",(0,t.jsx)(n.h3,{id:"parse_langserve_token_asynctoken",children:"parse_langserve_token_async(token)"}),"\n",(0,t.jsx)(n.p,{children:"Asynchronously parses the token to accumulate content from JSON for 'event: data' events,\nhandling JSON strings split between two tokens."}),"\n",(0,t.jsx)(n.p,{children:"Args:\ntoken (str or bytes): The token to parse."}),"\n",(0,t.jsx)(n.p,{children:"Yields:\nstr: An accumulated content from 'event: data'."}),"\n",(0,t.jsx)(n.h3,{id:"accumulate_json_lineslines-start_index-run_id",children:"accumulate_json_lines(lines, start_index, run_id)"}),"\n",(0,t.jsx)(n.p,{children:"Accumulate and parse JSON string parts from a list of lines starting\nat a given index, using a run_id-based buffer to handle splits across tokens."}),"\n",(0,t.jsxs)(n.p,{children:[":param"," lines: The list of lines containing the JSON data.\n",":param"," start_index: The index to start accumulation from.\n",":param"," run_id: The run_id for the current JSON accumulation.\n:return: The accumulated JSON string if a complete JSON object is formed,\nor None if accumulation should continue."]}),"\n",(0,t.jsx)(n.h3,{id:"parse_json_datajson_data-dict",children:"parse_json_data(json_data: dict)"}),"\n",(0,t.jsx)(n.p,{children:"Attempt to parse a JSON string and yield the appropriate content or error."}),"\n",(0,t.jsxs)(n.p,{children:[":param"," json_data: The dict string to parse."]}),"\n",(0,t.jsx)(n.p,{children:"yields:\nstr if within content key\ndict if no content key\nstr if error in decoding json"}),"\n",(0,t.jsx)(n.h3,{id:"process_langserve_lineslines-run_id",children:"process_langserve_lines(lines, run_id)"}),"\n",(0,t.jsx)(n.p,{children:"Process lines from langserve, parsing JSON data as needed."}),"\n",(0,t.jsxs)(n.p,{children:[":param"," lines: The list of lines to process.\n",":param"," run_id: The current run_id to index the accumulation buffer."]}),"\n",(0,t.jsx)(n.h3,{id:"process_langserve_lines_asynclines-run_id",children:"process_langserve_lines_async(lines, run_id)"}),"\n",(0,t.jsx)(n.p,{children:"Asynchronously process lines from langserve, parsing JSON data as needed.\nThis is an async wrapper for process_langserve_lines to fit into async processing."}),"\n",(0,t.jsxs)(n.p,{children:[":param"," lines: The list of lines to process.\n",":param"," run_id: The current run_id to index the accumulation buffer."]}),"\n",(0,t.jsx)(n.h3,{id:"set_metadata_valuelines",children:"set_metadata_value(lines)"}),"\n",(0,t.jsx)(n.p,{children:"No docstring available."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);